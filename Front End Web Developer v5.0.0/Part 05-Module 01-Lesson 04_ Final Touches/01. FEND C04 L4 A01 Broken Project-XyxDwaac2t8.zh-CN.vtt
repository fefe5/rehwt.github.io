WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.100
本节视频将探讨应用中一些已损坏的功能

00:00:02.100 --> 00:00:04.679
本节视频将探讨应用中一些已损坏的功能

00:00:04.679 --> 00:00:07.830
到目前为止 我们在设置 webpack 方面做得很棒

00:00:07.830 --> 00:00:09.330
但于此同时

00:00:09.330 --> 00:00:11.250
实际上 我们一开始就已经破坏了应用的功能

00:00:11.250 --> 00:00:14.355
实际上 我们一开始就已经破坏了应用的功能

00:00:14.355 --> 00:00:17.609
所以现在就要研究一下所有不能正常工作的功能

00:00:17.609 --> 00:00:21.390
看看如何修复

00:00:21.390 --> 00:00:23.339
先评估一下应用

00:00:23.339 --> 00:00:25.079
看看哪些能运行 哪些不能运行

00:00:25.079 --> 00:00:26.579
找出所有不能运行的功能

00:00:26.579 --> 00:00:30.750
首先 JavaScript 事件代码没有运行

00:00:30.750 --> 00:00:37.185
如果打开应用 尝试在表单中输入一些内容 可以看到

00:00:37.185 --> 00:00:41.765
我们编写的自定义 JavaScript 都没有运行

00:00:41.765 --> 00:00:45.500
所以我们需要修复该问题 找出不能正常运行的原因

00:00:45.500 --> 00:00:49.490
下一个问题是关于 Express 服务器

00:00:49.490 --> 00:00:52.460
我们做了很多的 webpack 设置

00:00:52.460 --> 00:00:55.850
而这弄乱了一开始设置好的 Express 服务器

00:00:55.850 --> 00:00:57.950
需要重新设置

00:00:57.950 --> 00:01:01.595
重置 Express 服务器很重要

00:01:01.594 --> 00:01:04.310
因为我们尚未设置的生产构建

00:01:04.310 --> 00:01:07.325
需要依赖 Express 服务器

00:01:07.325 --> 00:01:11.359
深入探索一下 为什么 JavaScript 代码不能正常工作

00:01:11.359 --> 00:01:14.540
webpack 会尝试保持全局作用域的 "干净"

00:01:14.540 --> 00:01:17.450
课程学到现在 你应该已经接触过作用域的概念

00:01:17.450 --> 00:01:20.150
课程学到现在 你应该已经接触过作用域的概念

00:01:20.150 --> 00:01:23.344
很可能听说过 保持全局作用域的干净是一件好事

00:01:23.344 --> 00:01:28.204
但是这意味着 webpack 会将所有代码放入

00:01:28.204 --> 00:01:33.519
封装好的小库中 这可能是一件好事

00:01:33.519 --> 00:01:34.804
确实是一件好事

00:01:34.805 --> 00:01:37.880
但是这同样意味着会有一些问题

00:01:37.879 --> 00:01:42.034
而这些问题正是现在破坏我们代码的原因

00:01:42.034 --> 00:01:46.234
如果你了解 webpack 的运行原理

00:01:46.234 --> 00:01:49.730
webpack 使用的是 IIFE 来分离所有代码

00:01:49.730 --> 00:01:54.140
将其整齐地组织成自己的小代码块

00:01:54.140 --> 00:01:59.540
这正是 IIFE 的用法 如果你还没有接触过这个概念

00:01:59.540 --> 00:02:02.315
稍后会有一些 IIFE 练习来帮助你理解

00:02:02.314 --> 00:02:09.229
但是现在 我们只需要知道 这些小代码块不能

00:02:09.229 --> 00:02:12.560
一直相互交流 而它们不能相互交流

00:02:12.560 --> 00:02:16.414
就是破坏事件代码的原因

00:02:16.414 --> 00:02:21.454
再深入讨论一下 JavaScript 的作用域设置

00:02:21.455 --> 00:02:24.910
要理解我们代码现在的问题

00:02:24.909 --> 00:02:27.139
需要很好地理解作用域的概念

00:02:27.139 --> 00:02:31.429
现在 webpack 处理大量的 JavaScript 代码

00:02:31.430 --> 00:02:36.159
将每个封装好的代码块放入一个作用域层

00:02:36.159 --> 00:02:38.854
你可以想象 我们的 JavaScript 代码 特别是对于大型应用来说

00:02:38.854 --> 00:02:42.599
你可以想象 我们的 JavaScript 代码 特别是对于大型应用来说

00:02:42.599 --> 00:02:45.384
可能会有成千上万行代码

00:02:45.384 --> 00:02:48.750
如果 webpack 不进行任何封装

00:02:48.750 --> 00:02:51.949
最终所有代码都会被扔到

00:02:51.949 --> 00:02:55.339
一个巨大的全局作用域中 我们必须确保

00:02:55.340 --> 00:02:58.700
变量名不会产生冲突

00:02:58.699 --> 00:03:02.344
最终会像这里一样 一团乱麻

00:03:02.344 --> 00:03:05.030
但是利用作用域 我们可以获得

00:03:05.030 --> 00:03:12.715
这些整齐堆叠的作用域层 是 webpack 用 IIFE 完成的

00:03:12.715 --> 00:03:16.520
现在 这里有一个问题是

00:03:16.520 --> 00:03:20.330
我们失去了两个层级之间的交流

00:03:20.330 --> 00:03:27.015
浏览器事件 (比如表单提交) 发生在全局层

00:03:27.014 --> 00:03:30.829
但是我们编写的自定义 JavaScript 发生在函数层

00:03:30.830 --> 00:03:36.830
我们的问题就是缺乏这两层之间的交流

00:03:36.830 --> 00:03:42.170
所以需要提供一种修复方案

00:03:42.169 --> 00:03:47.780
使函数可以在全局作用域内或者浏览器事件发生时被调用

00:03:47.780 --> 00:03:51.680
现在 我们先转移焦点 给你一些时间理解 IIFE

00:03:51.680 --> 00:03:55.719
因为这是一种非常出色、需要了解的 JavaScript 策略

00:03:55.719 --> 00:03:57.000
再次回来时

00:03:57.000 --> 00:04:01.240
我们就要讨论如何修改 webpack JavaScript 来修复问题了。最新课程跟课件还有一对一辅导请加wx：udacity6

