WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.270
本节视频 主要讨论如何设置 webpack 的生产配置

00:00:03.270 --> 00:00:06.435
本节视频 主要讨论如何设置 webpack 的生产配置

00:00:06.434 --> 00:00:10.649
这很可能是 webpack 最重要的部分

00:00:10.650 --> 00:00:16.170
因为这一步做好了 才能给用户良好的体验

00:00:16.170 --> 00:00:18.679
每个前端开发者都会关心用户运行自己网站的速度

00:00:18.679 --> 00:00:21.920
每个前端开发者都会关心用户运行自己网站的速度

00:00:21.920 --> 00:00:27.230
使网站运行缓慢的最大因素是大量的样式、

00:00:27.230 --> 00:00:31.774
大量 JavaScript 以及又大又多的图像

00:00:31.774 --> 00:00:34.989
想要网站运行更快

00:00:34.990 --> 00:00:36.795
就要使其更小

00:00:36.795 --> 00:00:38.560
网页越小

00:00:38.560 --> 00:00:42.425
需要给用户发送的字节数越少

00:00:42.424 --> 00:00:46.414
运行网站的速度就能越快

00:00:46.414 --> 00:00:49.280
想要网页更小

00:00:49.280 --> 00:00:51.530
我们只有两个选项

00:00:51.530 --> 00:00:58.460
要么删除 JavaScript、样式或图像

00:00:58.460 --> 00:01:03.410
要么通过压缩资源使其转为一个较小的格式

00:01:03.409 --> 00:01:10.884
而 webpack 配置就可以为我们完成很多缩小化的任务

00:01:10.885 --> 00:01:15.965
处于生产模式时 webpack 会自动缩小化所有的 JavaScript

00:01:15.965 --> 00:01:18.665
但是对于样式来说 是不同的处理方法

00:01:18.665 --> 00:01:21.550
现在在 webpack 开发服务器

00:01:21.549 --> 00:01:25.099
它会将样式全部放入 main.js 文件

00:01:25.099 --> 00:01:30.155
然后通过内联样式放入 HTML

00:01:30.155 --> 00:01:33.965
这样处理的问题是 内联样式太慢

00:01:33.965 --> 00:01:36.620
要提高效率

00:01:36.620 --> 00:01:42.785
我们需要将样式全部移入可以缩小化处理的 css 文件中

00:01:42.784 --> 00:01:49.819
要完成这些步骤 需要先添加 mini-css-extract-plugin 插件

00:01:49.819 --> 00:01:55.009
现在 你已经对在 webpack 配置中添加插件的操作很熟悉了

00:01:55.010 --> 00:02:01.234
不过还是快速过一遍 我已经添加了 mini-css-extract-plugin

00:02:01.234 --> 00:02:03.575
通过 npm 进行了安装

00:02:03.575 --> 00:02:08.120
在 plugins 列表中进行了实例化

00:02:08.120 --> 00:02:09.920
mini-css-extract-plugin 插件比较特殊的是

00:02:09.919 --> 00:02:14.809
它提供了一个加载器

00:02:14.810 --> 00:02:17.629
我们可以像上一节在开发配置中

00:02:17.629 --> 00:02:21.590
使用 sass 加载器和 css 加载器那样设置

00:02:21.590 --> 00:02:24.500
所以要添加一个新的 rule

00:02:24.500 --> 00:02:28.319
处理生产的所有样式表

00:02:30.280 --> 00:02:36.245
这里可以看到仍然在查找 scss 文件扩展名

00:02:36.245 --> 00:02:42.875
不过与开发配置中使用 style-loader 不同

00:02:42.875 --> 00:02:48.995
style-loader 的作用是将所有的 css 样式转换为内联样式

00:02:48.995 --> 00:02:51.995
如之前所说 内联样式很慢

00:02:51.995 --> 00:02:55.745
所以我们想要提取 (extract) 所有 css

00:02:55.745 --> 00:03:01.295
单独作为一个文件添加到分发文件夹中

00:03:01.294 --> 00:03:05.739
现在设置好了 webpack 生产配置

00:03:05.740 --> 00:03:10.340
我们可以到终端中运行 build prod 命令

00:03:10.340 --> 00:03:11.990
请确保自己已经安装好了 mini-css-extract-plugin

00:03:11.990 --> 00:03:18.379
请确保自己已经安装好了 mini-css-extract-plugin

00:03:18.379 --> 00:03:22.639
我们应该可以在运行该命令后看到

00:03:22.639 --> 00:03:28.009
分发文件夹中多了一个输出 main.css 文件

00:03:28.009 --> 00:03:30.215
打开这个 css 文件

00:03:30.215 --> 00:03:35.585
其中包括了我们所有的样式表

00:03:35.585 --> 00:03:42.340
现在没有特别多的样式 不过假设该文件有 5000 行

00:03:42.340 --> 00:03:46.300
现在是易于阅读的形式

00:03:46.300 --> 00:03:48.844
也就是说还没进行缩小化处理

00:03:48.844 --> 00:03:53.990
我们目前做的只是将所有 css 提取出来

00:03:53.990 --> 00:03:59.945
这些原本在开发模式下应该放入 main.js 的 css

00:03:59.944 --> 00:04:04.629
现在这些代码全部被放入了单独的 main.css 文件中

00:04:04.629 --> 00:04:07.549
这就是我们需要为用户进行缩小化处理的文件

00:04:07.550 --> 00:04:12.080
这就是我们需要为用户进行缩小化处理的文件

00:04:12.080 --> 00:04:15.100
要完成最终的最小化步骤

00:04:15.099 --> 00:04:20.240
要在 webpack prod 配置中添加一个新的内容

00:04:20.240 --> 00:04:24.530
也就是 optimization (优化) 属性

00:04:24.529 --> 00:04:31.684
这个设置的作用就是使我们可以对特定文件执行缩小化操作

00:04:31.685 --> 00:04:37.040
在当前示例中 还需要添加两个新的插件完成优化操作

00:04:37.040 --> 00:04:43.640
一个是 terser-plugin 另一个是 optimize-css-assets-plugin

00:04:43.639 --> 00:04:48.425
首先 要先安装这两个插件

00:04:48.425 --> 00:04:52.795
所以我安装好了 terser (紧凑) 和 optimize (优化) 插件

00:04:52.795 --> 00:04:58.819
现在需要为这两个插件添加 require 语句

00:04:58.819 --> 00:05:03.439
关于这两个插件 比较棒的一点是

00:05:03.439 --> 00:05:07.449
可以直接在这里实例化 而不用在 plugins 中编写

00:05:07.449 --> 00:05:09.289
你可以在这两个插件的 GitHub 指导说明中了解这一点

00:05:09.290 --> 00:05:12.305
你可以在这两个插件的 GitHub 指导说明中了解这一点

00:05:12.305 --> 00:05:14.090
现在只需要直接使用即可

00:05:14.089 --> 00:05:17.329
设置好两个新的插件之后

00:05:17.329 --> 00:05:24.310
重新运行配置 应该可以看到缩小化的 css 文件

00:05:24.310 --> 00:05:29.319
现在打开 main.css 文件 可以看到确实缩小了

00:05:29.319 --> 00:05:32.615
不再是易于阅读的格式

00:05:32.615 --> 00:05:35.420
将空格全部删除了

00:05:35.420 --> 00:05:39.740
某些缩小器甚至还会将类名称修改为一个字母

00:05:39.740 --> 00:05:44.644
或者做出一些其他的缩小化改善

00:05:44.644 --> 00:05:49.430
分享一条经验 遇到这样缩小化的构建文件时

00:05:49.430 --> 00:05:50.930
分享一条经验 遇到这样缩小化的构建文件时

00:05:50.930 --> 00:05:54.530
不要进行修改

00:05:54.529 --> 00:05:58.099
因为这些修改每次重新构建都会被覆盖

00:05:58.100 --> 00:06:02.720
简而言之 不要修改构建后文件

00:06:02.720 --> 00:06:05.100
这没什么好处

