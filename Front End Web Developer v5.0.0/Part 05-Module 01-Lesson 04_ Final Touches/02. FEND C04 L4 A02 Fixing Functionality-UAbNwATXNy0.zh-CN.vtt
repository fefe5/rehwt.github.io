WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.705
你已经完成了关于 IIFE 的练习

00:00:03.705 --> 00:00:08.355
现在来看一下 webpack 如何修复我们的 JavaScript 问题

00:00:08.355 --> 00:00:10.650
在这段代码中

00:00:10.650 --> 00:00:16.679
可以看到已经包含了上节课最后的 webpack 设置

00:00:16.679 --> 00:00:19.094
包含了样式加载器等设置

00:00:19.094 --> 00:00:22.660
不过这里还添加了一个新的 output 部分

00:00:22.660 --> 00:00:27.484
目前为止 我们都在使用默认的输出 (output) 设置

00:00:27.484 --> 00:00:29.839
但是为了使 JavaScript 正常运行

00:00:29.839 --> 00:00:33.545
我添加了这个 library 和 libraryTarget 设置

00:00:33.545 --> 00:00:36.789
不用太纠结这些设置的原理

00:00:36.789 --> 00:00:39.600
你需要知道的是 JavaScript 文件中

00:00:39.600 --> 00:00:42.800
自定义的 JavaScript 会被放入我们自己的库 Client 中

00:00:42.799 --> 00:00:46.804
自定义的 JavaScript 会被放入我们自己的库 Client 中

00:00:46.804 --> 00:00:49.549
Client 这个名称不重要

00:00:49.549 --> 00:00:51.364
你可以任意命名为其他名称

00:00:51.365 --> 00:00:55.280
需要理解的是

00:00:55.280 --> 00:01:01.424
我们所有的 JavaScript 代码现在都要通过 Client 进行访问

00:01:01.424 --> 00:01:03.284
这到底意味着什么?

00:01:03.284 --> 00:01:09.125
webpack 如何使用新的 Client 库? 这又有什么帮助?

00:01:09.125 --> 00:01:13.219
首先 打开 index.js 文件

00:01:13.219 --> 00:01:17.944
其中导入了我们的两个 JavaScript 文件

00:01:17.944 --> 00:01:24.729
实际上 我们还要将这两个文件导出 使其进入 Client 库

00:01:24.730 --> 00:01:27.320
至于如何进入 Client 库

00:01:27.319 --> 00:01:30.154
这是由 webpack 完成的 我们不需要关心

00:01:30.155 --> 00:01:34.760
只需要知道所有的 JavaScript

00:01:34.760 --> 00:01:41.045
都要从 index.js 文件导出 然后它们就都是 Client 库的一部分了

00:01:41.045 --> 00:01:46.490
但是这到底要如何在 index.html 中使用呢?

00:01:46.489 --> 00:01:49.459
打开 index.html 看一下自定义的 handleSubmit 函数

00:01:49.459 --> 00:01:54.994
打开 index.html 看一下自定义的 handleSubmit 函数

00:01:54.995 --> 00:01:58.385
这样并不能运行 也确实没有运行成功

00:01:58.385 --> 00:02:03.710
现在 我们可以添加 Client.handleSubmit

00:02:03.709 --> 00:02:09.310
这样就能引用到 Client 库中、刚才被导出的自定义函数了

00:02:09.310 --> 00:02:15.110
如果将这个文件以及所有 JavaScript 文件都进行相应的修改

00:02:15.110 --> 00:02:18.230
就能修复所有的 JavaScript 问题了

00:02:18.229 --> 00:02:20.299
打开 JavaScript 文件 只需要知道你编写的所有 JavaScript 中

00:02:20.300 --> 00:02:26.210
打开 JavaScript 文件 只需要知道你编写的所有 JavaScript 中

00:02:26.210 --> 00:02:29.585
现在都需要引用 Client 库

00:02:29.585 --> 00:02:33.349
所以 这里不能只使用 checkForName

00:02:33.349 --> 00:02:37.039
来调用我的第二个 JavaScript 函数

00:02:37.039 --> 00:02:42.739
需要确保通过 Client 库来引用 checkForName

00:02:42.740 --> 00:02:47.455
所以 我全局修改了自己代码中的引用情况

00:02:47.455 --> 00:02:51.860
现在 我重启了 webpack 可以看到当我输入

00:02:51.860 --> 00:02:57.530
一个名字然后点击 "Submit" 后 网页功能恢复了 很神奇

00:02:57.530 --> 00:03:01.509
现在来解决 Express 服务器的问题

00:03:01.509 --> 00:03:05.219
我们在开发中一直使用的是 webpack-dev-server

00:03:05.219 --> 00:03:07.925
这是一个非常出色的工具 因为这样我们就不用

00:03:07.925 --> 00:03:11.780
每次一修改样式都要重启浏览器

00:03:11.780 --> 00:03:15.289
可以在浏览器运行中就看到更新

00:03:15.289 --> 00:03:18.349
但是当我们在生产环境中时

00:03:18.349 --> 00:03:20.704
不能使用 webpack-dev-server

00:03:20.705 --> 00:03:23.240
我们要确保 Express 服务器

00:03:23.240 --> 00:03:26.314
设置正确 以供生产环境使用

00:03:26.314 --> 00:03:30.425
现在可以看到一个有趣的现象

00:03:30.425 --> 00:03:34.730
当我运行课程最开始设置好的 Express 服务器时

00:03:34.729 --> 00:03:40.649
它在 8080 端口运行 如果我打开该端口

00:03:43.759 --> 00:03:47.014
应用又变成了原来的样子

00:03:47.014 --> 00:03:50.750
课程第二节开始时的样子

00:03:50.750 --> 00:03:53.060
发生了什么?

00:03:53.060 --> 00:03:54.740
为什么会出现这样的情况?

00:03:54.740 --> 00:04:02.555
因为我们一直在使用不会重新构建 main.js 的 webpack-dev-server

00:04:02.555 --> 00:04:07.069
所以现在看到的分发文件夹中的 main.js 文件

00:04:07.069 --> 00:04:12.680
与添加 webpack-dev-server 之前构建的文件相同

00:04:12.680 --> 00:04:16.625
仍有一些工作需要完成

00:04:16.625 --> 00:04:20.014
有些同学可能已经注意到

00:04:20.014 --> 00:04:24.409
formHandler 函数中做了一次 fetch 请求

00:04:24.410 --> 00:04:28.220
这是一个很好的 fetch 请求示例 你可以将

00:04:28.220 --> 00:04:32.000
其放到自己的应用中 这可以引用一个本地文件

00:04:32.000 --> 00:04:37.160
也可以转到外部第三方 API

00:04:37.160 --> 00:04:42.650
你可以参考这段代码 为自己的项目添加 API

00:04:42.649 --> 00:04:49.509
现在 我们在查找 8081 端口上一个叫做 test 的文件

00:04:49.509 --> 00:04:53.250
这引出了 webpack-dev-server 的一个特点

00:04:53.250 --> 00:04:56.555
其只适用于单页应用

00:04:56.555 --> 00:04:59.240
如果你需要开始处理多个页面

00:04:59.240 --> 00:05:02.840
比如说 如果我们想查找开发服务器

00:05:02.839 --> 00:05:07.969
8080 端口上的 test 页面 就不能成功

00:05:07.970 --> 00:05:11.660
如果你想要开发服务器做到这件事

00:05:11.660 --> 00:05:16.235
我们就必须要做一些额外的设置

00:05:16.235 --> 00:05:18.680
这个 fetch 请求是模拟

00:05:18.680 --> 00:05:23.480
你可能会对另一个 API 做出的 fetch 请求类型

00:05:23.480 --> 00:05:28.825
但是如果打开服务器的 index.js

00:05:28.824 --> 00:05:32.329
可以看到一开始设置的方式

00:05:32.329 --> 00:05:35.524
是使用 8080 端口 这与

00:05:35.524 --> 00:05:38.719
同样运行在 8080 端口的开发服务器冲突了

00:05:38.720 --> 00:05:42.455
你不能同时在同一个端口运行两个应用

00:05:42.454 --> 00:05:47.240
所以这迫使我们将这里修改为 8081

00:05:47.240 --> 00:05:52.685
当然也可以修改为 3000 或者其他值 不过 8081 比较方便

00:05:52.685 --> 00:05:55.954
现在设置好 8081 端口

00:05:55.954 --> 00:06:00.589
就可以在运行 webpack 服务器的同时运行这个服务器了

00:06:00.589 --> 00:06:03.169
打开终端

00:06:03.170 --> 00:06:06.620
我开了两个不同的窗口

00:06:06.620 --> 00:06:13.384
Express 运行在 8081 端口 webpack 运行在 8080 端口

00:06:13.384 --> 00:06:15.730
现在打开我们的应用

00:06:15.730 --> 00:06:19.955
输入一个值然后点击 "Submit"

00:06:19.954 --> 00:06:26.029
可以看到浏览器返回了消息

00:06:26.029 --> 00:06:29.389
非常棒 这意味着我们的 Express 服务器运行正常

00:06:29.389 --> 00:06:34.319
而且所有的 JavaScript 都按预期运行

