WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.549
我们已经花了很多时间学习理论

00:00:02.549 --> 00:00:05.025
现在该亲手试试了

00:00:05.025 --> 00:00:07.830
现在让我们运行示例程序

00:00:07.830 --> 00:00:11.025
看看是否可以使用 fetch 访问 Web API

00:00:11.025 --> 00:00:16.545
这里设置好了 URL 的各个部分

00:00:16.545 --> 00:00:23.735
然后注册了一个 click 事件监听器

00:00:23.734 --> 00:00:26.129
并且传入回调函数 performAction

00:00:26.129 --> 00:00:28.605
当点击 Go 按钮时

00:00:28.605 --> 00:00:33.524
就会执行回调函数 在回掉函数里

00:00:33.524 --> 00:00:38.744
又调用了 getAnimalDemo 函数

00:00:38.744 --> 00:00:42.109
可以看到 getAnimalDemo 是一个

00:00:42.109 --> 00:00:47.644
异步函数 它有三个参数 分别是基准 URL

00:00:47.645 --> 00:00:51.295
动物名称和 API 密钥

00:00:51.295 --> 00:00:56.750
然后组合成请求 URL 传入 fetch 函数

00:00:56.750 --> 00:01:00.814
在这里调用 fetch

00:01:00.814 --> 00:01:05.734
传入的 URL 形如 http

00:01:05.734 --> 00:01:11.539
animal=tiger 然后是这一长串字符

00:01:11.540 --> 00:01:15.780
这样就可以访问 Web API 了

00:01:17.629 --> 00:01:20.609
试着运行一下

00:01:20.609 --> 00:01:26.430
然后我会深入讲解异步函数

00:01:26.829 --> 00:01:29.435
这里有点小机关

00:01:29.435 --> 00:01:31.094
你还记得吗

00:01:31.093 --> 00:01:33.949
这个 Web API 不是真的

00:01:33.950 --> 00:01:39.335
除了返回真实的数据 其他功能都和正常的 Web API 一样

00:01:39.334 --> 00:01:41.254
这里我会访问一个

00:01:41.254 --> 00:01:48.170
叫做 fakeAnimalData 的 API 端点

00:01:48.170 --> 00:01:52.010
看一下服务器代码

00:01:52.010 --> 00:01:57.800
我们将数据直接保存在变量 fakeData 中

00:01:57.799 --> 00:02:03.469
然后返回 {animal: "lion", fact: "lions are fun"}

00:02:03.469 --> 00:02:06.140
这个 JavaScript 对象

00:02:06.140 --> 00:02:10.250
模拟了调用真实 API 返回的数据

00:02:10.250 --> 00:02:11.794
用在我们的示例代码中足够了

00:02:11.794 --> 00:02:16.819
这里设置了 GET 路由 /fakeAnimalData

00:02:16.819 --> 00:02:22.594
并传入一个回调函数 该函数返回了模拟数据

00:02:22.594 --> 00:02:25.984
访问真实的 Web API 和这个在道理上是一样的

00:02:25.985 --> 00:02:29.790
让我们试一下

00:02:36.349 --> 00:02:40.280
嗯 貌似出了点问题

00:02:40.280 --> 00:02:45.890
原因是我现在运行的还是同步版本的示例

00:02:45.889 --> 00:02:52.509
注释掉它 打开 fetch 示例

00:02:58.969 --> 00:03:03.375
这下好了 点击 Go 按钮得到

00:03:03.375 --> 00:03:07.414
{animal: "lion", fact: "lions are fun"}

00:03:07.414 --> 00:03:15.209
这就是一个使用 fetch 访问 Web API 的例子

00:03:15.699 --> 00:03:21.179
现在我们来深入探讨一下

00:03:24.310 --> 00:03:28.944
当调用 getAnimalDemo 时

00:03:28.944 --> 00:03:32.239
第一件事是在函数定义前加关键字 async

00:03:32.240 --> 00:03:36.530
把它变成异步函数

00:03:36.530 --> 00:03:45.259
这样我们就可以使用 await、try 和 catch

00:03:45.259 --> 00:03:51.500
用它们访问 Web APIs 非常方便

00:03:51.500 --> 00:03:54.830
在函数内部

00:03:54.830 --> 00:03:58.640
我们定义一个变量存储 fetch 回来的结果

00:03:58.639 --> 00:04:02.644
这里 await 是重点

00:04:02.645 --> 00:04:06.020
它让代码在拿到数据后

00:04:06.020 --> 00:04:10.550
再执行下一步

00:04:10.550 --> 00:04:13.490
由于 fetch 访问的是 Web API.

00:04:13.490 --> 00:04:15.800
在拿它做点什么之前

00:04:15.800 --> 00:04:17.814
必须先等它返回

00:04:17.814 --> 00:04:21.350
这就是 await 的作用

00:04:21.350 --> 00:04:24.830
你只能在异步函数内部

00:04:24.829 --> 00:04:29.490
使用 await 关键字

00:04:29.500 --> 00:04:32.480
条件设置好后

00:04:32.480 --> 00:04:35.660
就等待 fetch 返回吧

00:04:35.660 --> 00:04:38.255
然后执行 try catch

00:04:38.254 --> 00:04:41.194
如果不出什么错 会执行 try 里面的语句

00:04:41.194 --> 00:04:45.110
假设一切顺利 拿到了我们请求的数据

00:04:45.110 --> 00:04:49.730
我们希望以 JSON 的形式处理数据

00:04:49.730 --> 00:04:52.580
那么就可以调用 .json

00:04:52.579 --> 00:04:55.800
将数据转换为我们想要的格式

00:04:55.800 --> 00:05:00.425
我们在这里将数据打印出来见证奇迹

00:05:00.425 --> 00:05:03.800
接下来我们会学习如何链接事件

00:05:03.800 --> 00:05:07.415
使用数据干更多的事

00:05:07.415 --> 00:05:10.970
你可以使用 catch(error)

00:05:10.970 --> 00:05:14.630
在出现异常时

00:05:14.629 --> 00:05:16.430
做些善后处理

00:05:16.430 --> 00:05:21.930
我们故意抛出个异常试试

00:05:28.420 --> 00:05:32.689
Error Data is not defined

00:05:32.689 --> 00:05:37.459
这真是一个优秀的异常处理方式

00:05:37.459 --> 00:05:41.129
让我们把代码恢复原状

00:05:42.160 --> 00:05:45.960
再运行一次

00:05:49.579 --> 00:05:57.060
啊哈 我们又可以在异步函数中发送 GET 请求了

