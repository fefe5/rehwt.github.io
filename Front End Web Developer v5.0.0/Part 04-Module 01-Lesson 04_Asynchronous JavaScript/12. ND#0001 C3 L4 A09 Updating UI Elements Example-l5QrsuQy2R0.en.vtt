WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.850
Now, let's bring it all together.

00:00:02.850 --> 00:00:07.230
Here is an example of what it could look like to create the animal API app

00:00:07.230 --> 00:00:11.565
we'd been discussing with a UI that updates dynamically.

00:00:11.564 --> 00:00:14.699
So again first, let's test it out and make sure it works.

00:00:14.699 --> 00:00:15.945
Then if it does,

00:00:15.945 --> 00:00:19.304
we'll walk through the code to see exactly how it went.

00:00:19.304 --> 00:00:27.824
So again, my favorite thing this time about lions are that lions are some of

00:00:27.824 --> 00:00:37.929
the most thoughtful writing partners in the world as everyone knows.

00:00:38.990 --> 00:00:44.570
Now, on our webpage we have the animal lion.

00:00:44.570 --> 00:00:46.850
Lions are fun fact.

00:00:46.850 --> 00:00:48.695
My favorite thing about lion,

00:00:48.695 --> 00:00:53.134
lions are some of the most thoughtful writing partners in the world.

00:00:53.134 --> 00:00:57.289
You can see we're also still getting our data here, but most importantly,

00:00:57.289 --> 00:01:02.089
we've updated our UI so that information that I just wrote and that we

00:01:02.090 --> 00:01:07.445
pulled dynamically from a Web API came together and updated onto our website.

00:01:07.444 --> 00:01:11.359
Now of course, you would do something much more creative than just having the text here.

00:01:11.359 --> 00:01:18.269
You could style it with CSS or you could add something like this, you could say,

00:01:46.819 --> 00:01:57.179
lions are so endearing to young dogs on the run.

00:01:57.180 --> 00:02:00.455
So now we see the animal is Lion,

00:02:00.454 --> 00:02:03.204
which maybe makes a little more sense than lion.

00:02:03.204 --> 00:02:05.605
But it's up to you because once you've done this,

00:02:05.605 --> 00:02:09.219
you have done elements that you are able to manipulate as is.

00:02:09.219 --> 00:02:15.419
So for a second, let's forget about the HTML and let's go back to look at our JavaScript.

00:02:18.250 --> 00:02:23.069
So everything should look pretty familiar at the top.

00:02:23.259 --> 00:02:25.685
This is our event listener.

00:02:25.685 --> 00:02:27.759
This is our callback function.

00:02:27.759 --> 00:02:32.164
Now, we've selected the value of our fav box.

00:02:32.164 --> 00:02:35.935
We make our call to the API.

00:02:35.935 --> 00:02:41.539
Then we post our data,

00:02:43.340 --> 00:02:46.485
and this is the magic.

00:02:46.485 --> 00:02:51.650
Because of async, we can wait until we have received the data,

00:02:51.650 --> 00:02:56.305
posted the data, and then we can update our UI.

00:02:56.305 --> 00:02:58.375
If we go to our update UI,

00:02:58.375 --> 00:03:05.960
we see that that is also an async function which will request an all route.

00:03:05.960 --> 00:03:10.879
An all route we've set up on our server is very simple.

00:03:10.879 --> 00:03:15.900
We have app.getall with a callback function get data.

00:03:15.900 --> 00:03:20.110
That is just going to send back to us, animal data.

00:03:20.110 --> 00:03:25.715
Animal data of course is also where our post route is set up to.

00:03:25.715 --> 00:03:27.245
So on our post route,

00:03:27.245 --> 00:03:32.360
we're going to animal data.push the information we got as we've seen,

00:03:32.360 --> 00:03:36.625
which populates animal data so that when we call it,

00:03:36.625 --> 00:03:38.729
it's ready for us.

00:03:38.729 --> 00:03:42.449
Now, once we've got that data back,

00:03:42.449 --> 00:03:46.459
which will wait for it to turn into JSON data,

00:03:46.460 --> 00:03:52.790
then we can select the three elements that we want to update

00:03:52.789 --> 00:03:59.870
which just so you see correspond directly to here in my index.html,

00:03:59.870 --> 00:04:02.200
I have a div with the ID animal name,

00:04:02.199 --> 00:04:04.155
a div with the ID animal fact,

00:04:04.155 --> 00:04:07.090
and a div with the ID animal fav.

00:04:07.090 --> 00:04:10.729
Here, I select each of those elements and then I

00:04:10.729 --> 00:04:15.094
set the corresponding property which for us is innerHTML,

00:04:15.094 --> 00:04:19.850
which is the property that it's going to set the text for us and then I

00:04:19.850 --> 00:04:24.785
tell it what to do using.notation and brackets.

00:04:24.785 --> 00:04:30.800
So all data is the variable that has our data in JSON format.

00:04:30.800 --> 00:04:33.090
So from that, I want

00:04:33.089 --> 00:04:37.489
the zero index entry which is where you remember because it's zero index,

00:04:37.490 --> 00:04:39.785
that's the first entry actually.

00:04:39.785 --> 00:04:41.960
For the animal name,

00:04:41.959 --> 00:04:44.329
I want to know what the animal is.

00:04:44.329 --> 00:04:48.329
Then I want the facts and then fav.

00:04:48.339 --> 00:04:52.939
Of course, we set our error so that if anything goes wrong we'll know,

00:04:52.939 --> 00:04:58.473
but this would let us update our UI dynamically using change,

00:04:58.473 --> 00:05:01.519
fetch calls, and promises.

00:05:01.519 --> 00:05:06.539
Let's see it in action one more time now that we've gone over the code.

00:05:08.629 --> 00:05:21.225
So lions, favorite things.

00:05:21.225 --> 00:05:28.390
Lions are so pretty in the morning.

00:05:30.230 --> 00:05:34.619
"I woke up like this,"

00:05:34.619 --> 00:05:42.965
says the yawning lion and action.

00:05:42.964 --> 00:05:45.054
Magic, am I right?

00:05:45.055 --> 00:05:50.525
So now we see how it all comes together by chaining promises and fetch calls.

00:05:50.524 --> 00:05:57.750
We're able to dynamically update the UI of our web app with asynchronous data calls.

