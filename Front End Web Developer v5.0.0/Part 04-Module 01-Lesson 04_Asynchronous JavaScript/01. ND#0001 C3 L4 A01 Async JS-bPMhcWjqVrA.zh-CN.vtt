WEBVTT
Kind: captions
Language: zh-CN

00:00:00.050 --> 00:00:07.024
让我们比较一下同步和异步 JavaScript

00:00:07.025 --> 00:00:11.195
JavaScript 是一门单线程语言

00:00:11.195 --> 00:00:14.380
大多数情况下在同一个进程中运行

00:00:14.380 --> 00:00:18.324
代码按照书写顺序 自上而下执行

00:00:18.324 --> 00:00:21.219
在屏幕左边是同步代码

00:00:21.219 --> 00:00:23.379
我们定义 sync 函数 在函数中调用

00:00:23.379 --> 00:00:27.250
console.log("first") 然后调用该函数

00:00:27.250 --> 00:00:30.175
最后调用 console.log("second")

00:00:30.175 --> 00:00:32.904
由于先调用 sync 函数

00:00:32.904 --> 00:00:34.440
因此先打印出字符串 first

00:00:34.439 --> 00:00:37.899
然后调用 console.log("second")

00:00:37.899 --> 00:00:43.074
由于 JavaScript 是一门单线程语言 因此按顺序打印出 second

00:00:43.075 --> 00:00:45.535
处理很多问题这就够了

00:00:45.534 --> 00:00:49.089
但是你无法让

00:00:49.090 --> 00:00:52.120
JavaScript 暂停一会儿

00:00:52.119 --> 00:00:55.164
等待另一件事情完成后再接着运行

00:00:55.164 --> 00:00:58.929
有时候的确会碰到这种情况

00:00:58.929 --> 00:01:03.954
因此 JavaScript 内置了一些异步编程工具

00:01:03.954 --> 00:01:07.164
比如 setTimeout 函数

00:01:07.165 --> 00:01:11.215
setTimeout 可以延迟一段时间

00:01:11.215 --> 00:01:16.500
比如 3000 毫秒后再去执行一个函数

00:01:16.500 --> 00:01:20.935
让我们通过一个例子理解它是怎么工作的

00:01:20.935 --> 00:01:26.450
首先看看同步执行时会如何

00:01:29.569 --> 00:01:36.824
打开浏览器会看到先打印出 first 

00:01:36.825 --> 00:01:39.230
然后打印出 second

00:01:39.230 --> 00:01:41.915
一点儿也不意外 因为它们是按顺序执行的

00:01:41.915 --> 00:01:46.625
现在 让我们在代码顶部

00:01:46.625 --> 00:01:48.950
添加 setTimeout 函数

00:01:48.950 --> 00:01:56.719
如果代码是同步运行的 那么我们就会按顺序看到 third first second

00:01:56.719 --> 00:01:58.969
但是代码是异步执行的

00:01:58.969 --> 00:02:01.170
因此我们会看到

00:02:07.879 --> 00:02:10.574
third 是在 first second 之后 最后才打印出来的 

00:02:10.574 --> 00:02:15.194
再看一遍

00:02:15.194 --> 00:02:19.584
first second third

00:02:19.585 --> 00:02:23.500
这就是一个异步代码的例子

00:02:23.500 --> 00:02:27.680
虽然 console.log("third") 在代码顶端

00:02:27.680 --> 00:02:30.930
但是仿佛被推入其他什么地方

00:02:30.930 --> 00:02:33.760
你可以叫这个地方为栈

00:02:33.759 --> 00:02:37.329
当 JavaScript 执行完其他代码

00:02:37.330 --> 00:02:39.305
无事可做时

00:02:39.305 --> 00:02:43.060
这段代码从栈中弹出 执行并打印消息

00:02:43.060 --> 00:02:49.405
异步 promises 的强大之处在于 不仅可以延迟一段时间

00:02:49.405 --> 00:02:52.534
比如 3000 毫秒 还可以设置条件

00:02:52.534 --> 00:02:55.189
当条件满足后

00:02:55.189 --> 00:02:58.354
再执行这段代码

00:02:58.354 --> 00:03:02.709
这就为编程提供了无限可能

