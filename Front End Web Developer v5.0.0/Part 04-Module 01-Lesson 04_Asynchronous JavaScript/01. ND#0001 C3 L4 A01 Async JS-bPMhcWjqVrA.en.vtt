WEBVTT
Kind: captions
Language: en

00:00:00.050 --> 00:00:07.024
Now, let's talk a little more deeply about synchronous versus asynchronous JavaScript.

00:00:07.025 --> 00:00:11.195
JavaScript naturally is a single-threaded programming language,

00:00:11.195 --> 00:00:14.380
which means for the most part it will be run as a single process in

00:00:14.380 --> 00:00:18.324
your computer essentially writing and running it from top to bottom.

00:00:18.324 --> 00:00:21.219
So if we look at the synchronous side over here,

00:00:21.219 --> 00:00:23.379
we see that we have a function in which we'll

00:00:23.379 --> 00:00:27.250
console.log the string first and then we call that function,

00:00:27.250 --> 00:00:30.175
and then we console.log a string second.

00:00:30.175 --> 00:00:32.904
Because we call sync first,

00:00:32.904 --> 00:00:34.440
we'll first see first,

00:00:34.439 --> 00:00:37.899
and then because console.log second comes second,

00:00:37.899 --> 00:00:43.074
and JavaScript is a single-threaded programming language it will go ahead and do second.

00:00:43.075 --> 00:00:45.535
Now, this is great for many things,

00:00:45.534 --> 00:00:49.089
but what it doesn't allow you to do is it doesn't allow you to say, "Hey,

00:00:49.090 --> 00:00:52.120
JavaScript, stop for a second while you're doing

00:00:52.119 --> 00:00:55.164
this and wait until something else happens."

00:00:55.164 --> 00:00:58.929
Because sometimes we're dependent on other parts of our code.

00:00:58.929 --> 00:01:03.954
So JavaScript already has had some a synchronicity built into it.

00:01:03.954 --> 00:01:07.164
One example, is the setTimeout function.

00:01:07.165 --> 00:01:11.215
SetTimeout is a function that allows you to delay a function.

00:01:11.215 --> 00:01:16.500
Here, we see it's 3,000 milliseconds.

00:01:16.500 --> 00:01:20.935
Let's take a look at these in action to really understand how they work differently.

00:01:20.935 --> 00:01:26.450
So first, let's try running it synchronously as we would expect.

00:01:29.569 --> 00:01:36.824
We go to our browser and we see instantly first comes first because it's on line sixth,

00:01:36.825 --> 00:01:39.230
and then second comes next,

00:01:39.230 --> 00:01:41.915
seems to make sense, it goes in order.

00:01:41.915 --> 00:01:46.625
But now, let's add the setTimeout function.

00:01:46.625 --> 00:01:48.950
We're going to put it at the top of our code,

00:01:48.950 --> 00:01:56.719
which means if it were running synchronously we would expect to see third, first, second.

00:01:56.719 --> 00:01:58.969
But because it's asynchronous,

00:01:58.969 --> 00:02:01.170
let's see what happens.

00:02:07.879 --> 00:02:10.574
The third came last,

00:02:10.574 --> 00:02:15.194
and you saw it came after the first and second. Let's see it again.

00:02:15.194 --> 00:02:19.584
First, second, and then third comes.

00:02:19.585 --> 00:02:23.500
This is an example of a synchronicity even

00:02:23.500 --> 00:02:27.680
though the console.log third is at the top of our code,

00:02:27.680 --> 00:02:30.930
it's put onto, you could call it a stack.

00:02:30.930 --> 00:02:33.760
It's put away and it's being dealt with somewhere else

00:02:33.759 --> 00:02:37.329
while JavaScript comes through and finishes the rest of these.

00:02:37.330 --> 00:02:39.305
Then when it's done,

00:02:39.305 --> 00:02:43.060
we see it come off the stack and go right into our log.

00:02:43.060 --> 00:02:49.405
Now, the real amazing part about a sync promises if that instead of just a time,

00:02:49.405 --> 00:02:52.534
like 3,000, we can set up condition.

00:02:52.534 --> 00:02:55.189
So we can say, we don't want the next part of

00:02:55.189 --> 00:02:58.354
this code to execute until a condition is set.

00:02:58.354 --> 00:03:02.709
This becomes a very very powerful possibility.

