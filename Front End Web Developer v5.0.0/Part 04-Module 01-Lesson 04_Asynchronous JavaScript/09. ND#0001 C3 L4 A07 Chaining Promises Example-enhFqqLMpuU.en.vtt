WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.730
So let's see an example of what it looks like to chain

00:00:02.730 --> 00:00:05.654
promises together in a real code situation.

00:00:05.655 --> 00:00:08.669
So here we see the code we're used to where we make up

00:00:08.669 --> 00:00:13.169
fake API call in this instance to a web API that we've set up.

00:00:13.169 --> 00:00:16.829
But what's new here is that we now use

00:00:16.829 --> 00:00:24.019
the then syntax after this complete successfully to make a post-request.

00:00:24.019 --> 00:00:26.375
Now if we track this post-request,

00:00:26.375 --> 00:00:29.940
we see that we're sending a route which is,

00:00:29.940 --> 00:00:34.429
add the animal and then an object which holds the data that we want to send.

00:00:34.429 --> 00:00:39.740
Now, this data is based on the data that we got back from the web API call,

00:00:39.740 --> 00:00:42.820
that then function passes that data for us here,

00:00:42.820 --> 00:00:50.094
so that we can say that we want to send data.animal, data.fact.

00:00:50.094 --> 00:00:55.368
Then here, we see it's just fav because that is not from the web API itself,

00:00:55.368 --> 00:01:01.140
that is right from our UI and it's something that our user will have entered themselves.

00:01:01.450 --> 00:01:04.930
Coming down to our postData call here,

00:01:04.930 --> 00:01:07.135
it's pretty similar to what we've seen,

00:01:07.135 --> 00:01:13.340
which is it's an async call that's going to fetch the URL that's passed to it,

00:01:13.340 --> 00:01:17.795
do our work for us and then return that new data.

00:01:17.795 --> 00:01:20.555
But to really get an idea what's going on under the hood,

00:01:20.555 --> 00:01:22.655
let's go look at our server.

00:01:22.655 --> 00:01:24.500
In the server code,

00:01:24.500 --> 00:01:29.870
we can see that we've created a post route, which is addAnimal.

00:01:29.870 --> 00:01:35.250
Now, when we call this from our code here,

00:01:38.379 --> 00:01:43.909
addAnimal, we're going to create a new entry in

00:01:43.909 --> 00:01:51.579
our data endpoint using the request.body that comes back to us.

00:01:51.579 --> 00:01:55.959
So req.body, in fact,

00:01:55.959 --> 00:01:59.629
let's lock it out so we get an idea of what's happening.

00:02:10.550 --> 00:02:12.750
Because we changed our server,

00:02:12.750 --> 00:02:15.629
we need to restart the server,

00:02:15.629 --> 00:02:19.750
then we'll refresh our web browser.

00:02:19.969 --> 00:02:24.020
Now we're just going to test something out.

00:02:25.650 --> 00:02:32.819
So here we can see that req.body comes back as animal;

00:02:32.819 --> 00:02:37.044
'Lion', fact; 'Lions are fun', fav; 'test'.

00:02:37.044 --> 00:02:40.599
So to build our entry in our app endpoint,

00:02:40.599 --> 00:02:45.085
we're going to create an entry that uses req.body.animal,

00:02:45.085 --> 00:02:48.719
which is lion, req.body.fact,

00:02:48.719 --> 00:02:50.069
which is lions are fun,

00:02:50.069 --> 00:02:53.204
and req.body.fav, which in this instance,

00:02:53.205 --> 00:02:55.830
is just the word test.

00:02:55.830 --> 00:03:01.830
Then we're going to push all that in the new entry into animal data,

00:03:02.379 --> 00:03:05.240
which is here and this is acting as

00:03:05.240 --> 00:03:09.145
our API endpoint from which we can gather data and do what we want.

00:03:09.145 --> 00:03:18.170
So going back to our client side code from our server code,

00:03:18.169 --> 00:03:22.614
we can see that within the then function,

00:03:22.615 --> 00:03:28.879
the post function will wait for the data it needs and then will execute.

00:03:28.879 --> 00:03:32.375
Let's test it out with something more serious.

00:03:32.375 --> 00:03:38.900
Let's say, 'Lions are

00:03:38.900 --> 00:03:48.485
the best dinner guests for an April affair'.

00:03:48.485 --> 00:03:51.720
My favorite thing about lions.

00:03:53.240 --> 00:03:56.564
Then we press "Go."

00:03:56.564 --> 00:04:02.340
We can see that after making our request,

00:04:02.340 --> 00:04:03.840
which we receive from the web API,

00:04:03.840 --> 00:04:07.115
just animal lion, fact; 'Lions are fun'.

00:04:07.115 --> 00:04:09.010
If we look here,

00:04:09.009 --> 00:04:11.454
we can see that from our app endpoint,

00:04:11.455 --> 00:04:13.390
we also have fav,

00:04:13.389 --> 00:04:16.339
'Lions are the best dinner guests'.

00:04:17.269 --> 00:04:19.814
Coming back over to our code,

00:04:19.814 --> 00:04:23.675
we can see that by using the then keyword syntax,

00:04:23.675 --> 00:04:29.514
we're able to do one thing which is make a request for information,

00:04:29.514 --> 00:04:32.589
and then we're able to do another once we have

00:04:32.589 --> 00:04:36.329
back a successfully resolved version of that.

00:04:36.329 --> 00:04:37.569
So in this case,

00:04:37.569 --> 00:04:40.750
once we get back the data from fake animal data,

00:04:40.750 --> 00:04:44.615
then we take that data and we create a post from it.

00:04:44.615 --> 00:04:47.600
Now, what if we wanted to do one more thing?

00:04:47.600 --> 00:04:50.885
What if we wanted to chain another promise that said

00:04:50.884 --> 00:04:54.829
after we get the data and we post the data,

00:04:54.829 --> 00:04:59.069
what if we want to get the data that we've posted and update our UI with it?

00:04:59.069 --> 00:05:05.389
That is, what if we want to use dynamically produced data in our static web page?

00:05:05.389 --> 00:05:09.069
We'll learn how to do that next.

