WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.549
Now that you've had some time to learn a little bit

00:00:02.549 --> 00:00:05.025
more about this and maybe try some on your own,

00:00:05.025 --> 00:00:07.830
let's try running our own demo to see if we can get

00:00:07.830 --> 00:00:11.025
fetched to work with our Web API example.

00:00:11.025 --> 00:00:16.545
So as reminder, here we've set up the parts to our URL and then,

00:00:16.545 --> 00:00:23.735
I've just added a simple event listener here called Click is the event listener,

00:00:23.734 --> 00:00:26.129
Perform Action is the callback.

00:00:26.129 --> 00:00:28.605
So that when I click this Go button,

00:00:28.605 --> 00:00:33.524
it will perform this action and the action that I want to do is

00:00:33.524 --> 00:00:38.744
I want to call the Get Animal demo function which is right here.

00:00:38.744 --> 00:00:42.109
You can see that our Get Animal Demo is

00:00:42.109 --> 00:00:47.644
an async function that takes three parameters which are the base URL,

00:00:47.645 --> 00:00:51.295
the animal we want and the API key.

00:00:51.295 --> 00:00:56.750
Then, rebuild our URL into a fetch call.

00:00:56.750 --> 00:01:00.814
So here we have fetch and you can imagine this,

00:01:00.814 --> 00:01:05.734
because of its parts is actually a URL that would be something like Http,

00:01:05.734 --> 00:01:11.539
animal equals tiger and then this long string and in total,

00:01:11.540 --> 00:01:15.780
that is what will let you query a web API.

00:01:17.629 --> 00:01:20.609
So let's try to run this.

00:01:20.609 --> 00:01:26.430
Then I'll go through a little more and explain the anatomy of the async function.

00:01:26.829 --> 00:01:29.435
Now I'm going to get a little tricky,

00:01:29.435 --> 00:01:31.094
because if you remember,

00:01:31.093 --> 00:01:33.949
we made up this Web API.

00:01:33.950 --> 00:01:39.335
So keep in mind that this is how everything would work except to really get data back,

00:01:39.334 --> 00:01:41.254
I'm going to do this.

00:01:41.254 --> 00:01:48.170
I'm going to fetch an API endpoint that I've set up called Fake Animal Data.

00:01:48.170 --> 00:01:52.010
If we look here in our server file,

00:01:52.010 --> 00:01:57.800
we have our dummy API endpoint data right here which is fake data and we're going to

00:01:57.799 --> 00:02:03.469
send back to our API request a lion and a fact which are lions are fun.

00:02:03.469 --> 00:02:06.140
This object right here actually

00:02:06.140 --> 00:02:10.250
simulates what you're likely to get back from a real API call,

00:02:10.250 --> 00:02:11.794
so it's helpful to us.

00:02:11.794 --> 00:02:16.819
So here we have a get route setup that says "Get Fake Animal Data" with

00:02:16.819 --> 00:02:22.594
a callback function and the callback function just sends back our fake data.

00:02:22.594 --> 00:02:25.984
This really does simulate how it would be to work with an API.

00:02:25.985 --> 00:02:29.790
So let's test it out now.

00:02:36.349 --> 00:02:40.280
Okay. This is an interesting mistake perhaps.

00:02:40.280 --> 00:02:45.890
But if you see right now I still am just running a synchronous demo which I'm going

00:02:45.889 --> 00:02:52.509
to turn off and I'm going to turn on our fetched demo.

00:02:58.969 --> 00:03:03.375
There it is. We press Go and we get back,

00:03:03.375 --> 00:03:07.414
animal, lion, fact, lions are fun.

00:03:07.414 --> 00:03:15.209
So that's an example of how you would make a get request using fetch to a Web API.

00:03:15.699 --> 00:03:21.179
Now let's dive a little further into the anatomy here of what we're doing.

00:03:24.310 --> 00:03:28.944
So when we're calling this function Get Animal Demo,

00:03:28.944 --> 00:03:32.239
the first thing is we make it an async function by

00:03:32.240 --> 00:03:36.530
adding the async keyword before the function itself.

00:03:36.530 --> 00:03:45.259
This gives us access to the async keywords such as await, try and catch.

00:03:45.259 --> 00:03:51.500
These come together to make a really elegant syntax for working with web APIs.

00:03:51.500 --> 00:03:54.830
So once we're into the meat of our function,

00:03:54.830 --> 00:03:58.640
we set a variable to hold the fetch calls

00:03:58.639 --> 00:04:02.644
return and the await keyword is what makes this all work because

00:04:02.645 --> 00:04:06.020
await is telling the script not to go on to

00:04:06.020 --> 00:04:10.550
the next part until it's received the data that it needs,

00:04:10.550 --> 00:04:13.490
because our fetch call is calling to a Web API.

00:04:13.490 --> 00:04:15.800
So in order for us to do something with that,

00:04:15.800 --> 00:04:17.814
we need to first get it back.

00:04:17.814 --> 00:04:21.350
That's what await allows inside of an async function.

00:04:21.350 --> 00:04:24.830
You can only use the keyword await if you've already

00:04:24.829 --> 00:04:29.490
set it up to be an async function using the async keyword.

00:04:29.500 --> 00:04:32.480
Once you've set up what your condition is,

00:04:32.480 --> 00:04:35.660
you want to await for the fetch call,

00:04:35.660 --> 00:04:38.255
then you do a try and a catch.

00:04:38.254 --> 00:04:41.194
A try is what happens if everything goes well.

00:04:41.194 --> 00:04:45.110
So assuming everything goes well and we get our data back,

00:04:45.110 --> 00:04:49.730
we want to get a new data that is in JSON format, right?

00:04:49.730 --> 00:04:52.580
So this.JSON is a method that's just giving us

00:04:52.579 --> 00:04:55.800
our data in JSON which is how we want it and for now,

00:04:55.800 --> 00:05:00.425
we're just going to console.log that data because it's magic as is.

00:05:00.425 --> 00:05:03.800
Next, we'll learn how we can chain events

00:05:03.800 --> 00:05:07.415
so that we can do something else with that data.

00:05:07.415 --> 00:05:10.970
The catch error is keyword syntax that you can

00:05:10.970 --> 00:05:14.630
use to make sure that if something goes wrong,

00:05:14.629 --> 00:05:16.430
you have some idea of it.

00:05:16.430 --> 00:05:21.930
Let's see what it would look like if we purposefully caused an error.

00:05:28.420 --> 00:05:32.689
Error. Data is not defined.

00:05:32.689 --> 00:05:37.459
That is a beautiful and easy way to catch errors.

00:05:37.459 --> 00:05:41.129
So if we set our code again to work,

00:05:42.160 --> 00:05:45.960
let's run it one more time.

00:05:49.579 --> 00:05:57.060
There we go. We see we have a working get requests in an async function.

