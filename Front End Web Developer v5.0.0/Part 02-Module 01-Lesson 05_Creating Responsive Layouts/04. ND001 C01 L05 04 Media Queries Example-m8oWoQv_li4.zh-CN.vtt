WEBVTT
Kind: captions
Language: zh-CN

00:00:01.459 --> 00:00:05.099
回到我们的博客页面

00:00:05.099 --> 00:00:09.869
这里我们可以看到首页有一点不同

00:00:09.869 --> 00:00:13.889
到目前为止 所有的内容都展示在一列里面

00:00:13.890 --> 00:00:19.440
因为当你做移动端设计或响应式设计时

00:00:19.440 --> 00:00:25.275
最最重要的是从最小最简单的部分开始

00:00:25.274 --> 00:00:29.159
相信我 你可以有你自己的方式 但是

00:00:29.160 --> 00:00:31.980
这里比较明智的方式是先在较小的屏幕上

00:00:31.980 --> 00:00:36.935
显示出所有你想要显示的内容 然后在此基础上进行开发

00:00:36.935 --> 00:00:38.530
在这个例子中

00:00:38.530 --> 00:00:43.335
我从一个 container 容器开始

00:00:43.335 --> 00:00:45.469
如果你查看这里

00:00:45.469 --> 00:00:51.484
在 grid-template-areas 中 我只是简单的将每个区域设置成了一列

00:00:51.484 --> 00:00:53.664
一个 header 一个 sidebar 一个 main 区域

00:00:53.664 --> 00:00:57.375
和一个 footer 区域

00:00:57.375 --> 00:01:02.159
这里 我将不同的元素放置进了对应的网格区域内

00:01:02.159 --> 00:01:04.259
不过在底部

00:01:04.260 --> 00:01:06.765
我设置了一条新的规则

00:01:06.765 --> 00:01:10.189
如果屏幕达到一定宽度

00:01:10.189 --> 00:01:13.640
这里也就是屏幕的最小宽度

00:01:13.640 --> 00:01:19.323
如果超过了 900 像素

00:01:19.323 --> 00:01:23.299
我们就会创建一个新的 grid-template-areas

00:01:23.299 --> 00:01:26.789
所以当屏幕宽度低于 900 像素时

00:01:26.790 --> 00:01:29.310
采用这个 grid-template-areas

00:01:29.310 --> 00:01:31.929
同样地

00:01:31.929 --> 00:01:36.200
当屏幕宽度超过 900 像素时 我们使用下面这种方式

00:01:36.200 --> 00:01:38.659
我们可以来试一试

00:01:38.659 --> 00:01:41.754
如果我们拖动改变屏幕宽度 看见没？

00:01:41.754 --> 00:01:44.064
在 900 像素这个点

00:01:44.064 --> 00:01:45.799
页面会发生变化

00:01:45.799 --> 00:01:48.019
这里我们有一个完整宽度的布局

00:01:48.019 --> 00:01:50.479
有足够的空间显示 sidebar 区域

00:01:50.480 --> 00:01:51.965
content 内容区域 header 以及 footer 区域

00:01:51.965 --> 00:01:55.240
随着我们不断缩小屏幕空间

00:01:55.239 --> 00:01:58.714
样式会发生变化

00:01:58.715 --> 00:02:01.460
一个需要特别注意的事情是

00:02:01.459 --> 00:02:05.839
我将媒体查询放在了代码底部

00:02:05.840 --> 00:02:08.539
这通常是一个比较好的方式

00:02:08.539 --> 00:02:11.569
因为 CSS 代码是从上到下的顺序

00:02:11.569 --> 00:02:14.930
所以你可以先设置

00:02:14.930 --> 00:02:18.305
当屏幕低于 900 像素时的样式

00:02:18.305 --> 00:02:20.750
然后是高于 900 像素时的样式

00:02:20.750 --> 00:02:24.155
放置在这里的规则将会覆盖之前的样式

00:02:24.155 --> 00:02:29.370
现在我们先删除掉这里面的代码

00:02:29.539 --> 00:02:34.299
这里的关键字是 @media 让我们重新写一下

00:02:34.300 --> 00:02:39.615
@media @media 会接受参数

00:02:39.615 --> 00:02:43.110
我们使用 min-width

00:02:43.110 --> 00:02:48.565
这次我们设置为屏幕更宽一些时再改变样式

00:02:48.564 --> 00:02:52.824
设置为 1100 像素作为我们的断点

00:02:52.824 --> 00:02:54.924
然后在括号内部

00:02:54.925 --> 00:02:58.930
放置好我们想要应用的 CSS 规则

00:02:58.930 --> 00:03:02.694
现在我们已经设置好了在 1100 像素时的样式

00:03:02.694 --> 00:03:05.259
所以当我们把屏幕拖动到 900 像素时

00:03:05.259 --> 00:03:06.909
并不会有变化 但是在达到 1100 像素

00:03:06.909 --> 00:03:10.495
宽屏的样式就生效了

00:03:10.495 --> 00:03:14.575
所以现在我们需要在 1100 像素时样式才会发生变化

00:03:14.574 --> 00:03:19.119
因为我们在媒体查询中设置的断点就是这样

00:03:19.120 --> 00:03:22.349
这就是一个关于使用媒体查询的一个例子

00:03:22.349 --> 00:03:25.310
现在你可以先自己动手试试 然后我们会回来看看

00:03:25.310 --> 00:03:28.460
如何同时使用 2 种媒体查询方式

00:03:28.460 --> 00:03:30.680
这样会有 3 种可能的布局样式

00:03:30.680 --> 00:03:32.224
一种针对小屏幕

00:03:32.224 --> 00:03:33.799
一种针对中型屏幕

00:03:33.800 --> 00:03:37.200
和一种专门针对大型屏幕的样式 祝你好运

