WEBVTT
Kind: captions
Language: zh-CN

00:00:01.820 --> 00:00:05.280
回到我们的博客页面

00:00:05.280 --> 00:00:10.109
这里我们要来关注一下 content 内容区域

00:00:10.109 --> 00:00:14.625
如果把它变成一个照片相册应该不错

00:00:14.625 --> 00:00:18.420
而且正好可以发挥 CSS grid 的优势

00:00:18.420 --> 00:00:22.110
你可以看到这里我已经搭建好了一个

00:00:22.109 --> 00:00:27.134
2 X 2 的网格 它很适合用来做图片相册

00:00:27.135 --> 00:00:31.965
我们来看一看如何将一个 grid 嵌套进另一个更大的 grid 容器中的

00:00:31.964 --> 00:00:34.920
我们有一个 grid 包含了 header

00:00:34.920 --> 00:00:36.585
blog post content 以及 footer 区域

00:00:36.585 --> 00:00:40.245
然后在 content 中 我们有第二个嵌套的 grid

00:00:40.244 --> 00:00:44.009
这是它们对应的 HTML 代码

00:00:44.009 --> 00:00:50.524
在 content 中有一个id 属性为 nestedGrid 的 div

00:00:50.524 --> 00:00:52.625
在 nestedGrid 内部

00:00:52.625 --> 00:00:56.329
我放置了 4 个元素 每个元素有一个自己的 id

00:00:56.329 --> 00:00:58.975
同时有一个共同的类名 'photoBox'

00:00:58.975 --> 00:01:00.624
在 style 标签中

00:01:00.624 --> 00:01:05.015
我设置了 nestedGrid 的 display 属性为 grid

00:01:05.015 --> 00:01:08.439
然后我们通过给行与列分别设置

00:01:08.439 --> 00:01:13.700
50% 来将区域分成 4 个部分

00:01:13.700 --> 00:01:20.870
到目前为止 我选择了显式的设置每个方块的宽度和高度

00:01:20.870 --> 00:01:24.290
但是如果

00:01:24.290 --> 00:01:27.415
你想要容器更宽一些的话

00:01:27.415 --> 00:01:29.820
grid 也会自动适应调整

00:01:29.819 --> 00:01:37.794
这里我们可以看到 id 为 one 的 div 被放置在了左上角的区域

00:01:37.795 --> 00:01:40.960
我们来放置一张图片在里面

00:01:40.959 --> 00:01:46.744
设置它的 background-image 属性

00:01:46.745 --> 00:01:50.600
路径设置为我们放置的图片路径

00:01:52.709 --> 00:01:57.959
"images/waterfall.jpg" 好了 图片出现了

00:01:57.959 --> 00:02:03.750
不过这里我想要调整一下它的尺寸

00:02:03.750 --> 00:02:06.900
设置 background-size 为 cover 属性

00:02:06.900 --> 00:02:11.300
看起来好了一些 不过不是我想要的结果

00:02:11.300 --> 00:02:15.800
我们这里还是采用 contain

00:02:15.800 --> 00:02:22.520
现在我们继续来给相册添加第二张图片

00:02:22.520 --> 00:02:28.020
这里直接简单的复制和粘贴一遍

00:02:28.090 --> 00:02:32.705
然后换一张图片 换成 'styllWater'

00:02:32.705 --> 00:02:35.030
这里名称弄错了

00:02:35.030 --> 00:02:38.750
我真正想要的应该是 still-water

00:02:38.750 --> 00:02:42.110
现在我们已经有了一些组合的 grid

00:02:42.110 --> 00:02:47.810
我们对 three 和 four 做相同的事情

00:02:48.479 --> 00:02:52.884
放置 light 和 night 图片

00:02:52.884 --> 00:02:58.060
这里要做的就是简单改变图片的路径 放置进去不同的图片

00:02:58.060 --> 00:03:07.819
我们将图片路径改为 light.jpg 和 night.jpg

00:03:07.819 --> 00:03:10.394
现在 我们刷新页面

00:03:10.395 --> 00:03:12.960
好了 出现了

00:03:12.960 --> 00:03:14.980
这里我们还有一些要做的事情

00:03:14.979 --> 00:03:19.209
第一件事情是我希望它们之间能有一些空隙

00:03:19.210 --> 00:03:22.689
如果你记得的话 我们可以在 nestedGrid 中

00:03:22.689 --> 00:03:26.439
使用 grid-gap 属性来添加间隙

00:03:26.439 --> 00:03:32.030
现在 我想再试着看看如果我们采用不同的布局方式会怎样

00:03:32.030 --> 00:03:39.335
比如将列设置为 70-30 的模式

00:03:39.335 --> 00:03:44.855
现在你可以看到我们有了一个嵌套的 CSS 网格

00:03:44.854 --> 00:03:49.579
我们有一个主要的网格 它搭建出了我们页面的主要布局结构

00:03:49.580 --> 00:03:53.630
然后在 content 内容区域中

00:03:53.629 --> 00:03:58.509
我们创建了第二个网格系统用于放置这些图片

00:03:58.509 --> 00:04:01.969
在 HTML 代码中 我们可以很直观的看见

00:04:01.969 --> 00:04:05.120
它只是嵌套了一些元素在里面

00:04:05.120 --> 00:04:08.360
顶部的元素是 container

00:04:08.360 --> 00:04:12.580
在它内部是我们主要的网格系统

00:04:12.580 --> 00:04:14.355
有 header 元素

00:04:14.354 --> 00:04:18.810
blog posts content 以及 footer 元素

00:04:18.810 --> 00:04:22.089
在 content 内部

00:04:22.089 --> 00:04:25.564
有一个嵌套的网格系统

00:04:25.564 --> 00:04:30.980
在它内部有 4 个元素

00:04:30.980 --> 00:04:35.600
记住 在嵌套网格中你也可以做任何你想要的事情

00:04:35.600 --> 00:04:37.085
你可以做一个不规则的网格

00:04:37.084 --> 00:04:46.139
如果我改变它们的顺序的话 你可以看见图片顺序也会改变

00:04:46.139 --> 00:04:49.610
如果我想要它们挨得更近一些的话

00:04:49.610 --> 00:04:52.134
我可以简单的设置 nestedGrid 中

00:04:52.134 --> 00:04:55.235
的 grid-gap 属性来完成它

00:04:55.235 --> 00:04:58.910
现在它们就距离很近了

00:04:58.910 --> 00:05:06.840
这就是使用 CSS grid 创建博客页面结构的例子

