WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:06.960
接下来谈谈客户端和服务器端代码的区别

00:00:06.960 --> 00:00:11.759
我觉得下面的方式可以容易地区分客户端和服务器端

00:00:11.759 --> 00:00:18.030
服务器是最先搭建好的 处理一切不在浏览器中执行的任务

00:00:18.030 --> 00:00:23.609
比如存储用户使用应用时所产生的数据

00:00:23.609 --> 00:00:26.054
与之相反

00:00:26.054 --> 00:00:29.120
客户端代表所有在浏览器中运行的代码

00:00:29.120 --> 00:00:32.745
和用户访问最终产品的的代码

00:00:32.744 --> 00:00:36.750
了解一下浏览器或许会对我们厘清概念有所帮助

00:00:36.750 --> 00:00:40.064
以 Chrome 或者 Safari 为例

00:00:40.064 --> 00:00:43.464
它们都是功能强大的软件

00:00:43.465 --> 00:00:46.520
可以完成很多浏览器的任务

00:00:46.520 --> 00:00:49.175
比如运行 HTML

00:00:49.174 --> 00:00:52.339
JavaScript CSS

00:00:52.340 --> 00:00:54.710
浏览器的确

00:00:54.710 --> 00:00:57.755
做了大量工作

00:00:57.755 --> 00:00:59.565
但是其他事

00:00:59.564 --> 00:01:01.309
都是服务器干的

00:01:01.310 --> 00:01:06.560
我们来看一下客户端发起一个 POST 请求都做了什么

00:01:06.560 --> 00:01:10.170
到目前为止 我们将目光主要放在服务器端

00:01:10.170 --> 00:01:13.879
比如配置端口

00:01:13.879 --> 00:01:17.119
使用中间件

00:01:17.120 --> 00:01:22.425
现在让我们将目光转向客户端

00:01:22.424 --> 00:01:29.120
在异步函数中 异步函数将会在下一节课学习

00:01:29.120 --> 00:01:31.219
访问一个 POST 路由

00:01:31.219 --> 00:01:35.870
将结果赋给 const response

00:01:35.870 --> 00:01:42.875
我们 fetch 一个 目的 URL

00:01:42.875 --> 00:01:49.204
紧接着指明请求的种类

00:01:49.204 --> 00:01:53.435
这里使用 POST 因为我想发送一些数据

00:01:53.435 --> 00:01:55.519
当然也可以 GET

00:01:55.519 --> 00:01:59.339
PUT 甚至 DELETE 数据

00:02:00.590 --> 00:02:04.850
这里很多都是模板代码

00:02:04.849 --> 00:02:06.515
它们是必不可少的

00:02:06.515 --> 00:02:10.895
但是数据类型是我们真正需要关心的

00:02:10.895 --> 00:02:12.640
在 HTTP 头中

00:02:12.639 --> 00:02:16.339
指定使用 JSON

00:02:16.340 --> 00:02:19.775
那么请求体中也必须使用

00:02:19.775 --> 00:02:24.004
相应的数据类型

00:02:24.004 --> 00:02:27.840
由于服务器端用的是字符串

00:02:27.840 --> 00:02:30.015
因此需要使用 JSON.stringify 方法

00:02:30.014 --> 00:02:36.869
将数据转换为 JSON

