WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.975
在讨论构建工具及其用途 以及更多细节之前

00:00:03.975 --> 00:00:08.339
在讨论构建工具及其用途 以及更多细节之前

00:00:08.339 --> 00:00:13.620
先退后一步 讨论一下为什么我们会需要构建工具?

00:00:13.619 --> 00:00:15.658
作为一名前端开发者

00:00:15.659 --> 00:00:17.580
你总是需要管理各种库和技术

00:00:17.579 --> 00:00:22.279
你总是需要管理各种库和技术

00:00:22.280 --> 00:00:25.530
你可能尚未对此有明确的认知

00:00:25.530 --> 00:00:31.230
当我们仅仅构建 CSS 和 HTML 或者较小的应用时

00:00:31.230 --> 00:00:35.460
只有一个 CSS 文件和一个 JavaScript 文件

00:00:35.460 --> 00:00:37.905
会将所有内容都放在这两个文件中

00:00:37.905 --> 00:00:40.664
但是 在构建专业级应用时

00:00:40.664 --> 00:00:44.234
这种方案不再可行

00:00:44.234 --> 00:00:48.629
因为专业网站需要大量资源

00:00:48.630 --> 00:00:51.890
并且应用很多不同的技术

00:00:51.890 --> 00:00:54.439
资源管理将变得非常复杂

00:00:54.439 --> 00:00:58.549
我们需要决定在什么时候运行什么库

00:00:58.549 --> 00:01:04.340
不能只是将所有内容都放到页面上 希望它们能在正确的时间运行

00:01:04.340 --> 00:01:08.840
因此 以一个专业网站为例

00:01:08.840 --> 00:01:11.954
可以看看优达学城的网站

00:01:11.954 --> 00:01:14.120
打开网站后

00:01:14.120 --> 00:01:17.630
可以看一下 head 标签里面的内容

00:01:17.629 --> 00:01:21.304
这个页面加载的所有资源

00:01:21.305 --> 00:01:23.435
数量是十分惊人的

00:01:23.435 --> 00:01:26.740
这样来看资源是可行的

00:01:26.739 --> 00:01:29.359
但还不是最好的视图

00:01:29.359 --> 00:01:33.379
如果我要查看网站加载的资源文件

00:01:33.379 --> 00:01:35.974
我会切换到 Network 面板

00:01:35.974 --> 00:01:38.869
如果你以前从未使用过 你会发现这简直太棒了

00:01:38.870 --> 00:01:43.564
Network 面板会显示当前页面加载的所有资源文件

00:01:43.564 --> 00:01:45.590
可能需要刷新一下

00:01:45.590 --> 00:01:51.780
然后 就能看到所有不同的 JavaScript、

00:01:51.780 --> 00:01:55.265
CSS 和其它加载到页面的资源文件

00:01:55.265 --> 00:01:57.500
我们不妨尝试一下

00:01:57.500 --> 00:02:00.784
当你滚动浏览这些内容

00:02:00.784 --> 00:02:05.965
能看到页面上不同资源的大量相关信息

00:02:05.965 --> 00:02:10.030
不仅可以看到占用了多少字节

00:02:10.030 --> 00:02:11.710
或资源文件的大小

00:02:11.710 --> 00:02:13.808
还可以看到资源类型

00:02:13.808 --> 00:02:16.930
以及是否正确加载

00:02:16.930 --> 00:02:20.469
这也使 Network 选项成为一个出色的调试工具

00:02:20.469 --> 00:02:24.960
强烈建议你访问其他网站 亲自尝试一下

00:02:24.960 --> 00:02:27.075
但是 就目前而言

00:02:27.074 --> 00:02:32.504
我希望你能了解到 这个页面加载的资源有很多

00:02:32.504 --> 00:02:33.905
即使是一个页面 仍然运行了非常多不同的资源

00:02:33.905 --> 00:02:37.229
即使是一个页面 仍然运行了非常多不同的资源

00:02:37.229 --> 00:02:40.379
有 JavaScript 还有 gif、JPEG

00:02:40.379 --> 00:02:43.509
有 JavaScript 还有 gif、JPEG

00:02:43.509 --> 00:02:46.614
以及需要管理的所有其它资源

00:02:46.615 --> 00:02:50.525
另外 资源文件的顺序通常也很重要

00:02:50.525 --> 00:02:54.349
因此 你可以看到 如果专业项目的前端开发者

00:02:54.349 --> 00:03:01.114
没有某种工具来帮他们管理这些资源

00:03:01.115 --> 00:03:03.680
仅仅是确保所有资源正确地加载

00:03:03.680 --> 00:03:07.254
就会花费大量的时间

00:03:07.254 --> 00:03:10.685
有时候 我会把前端项目开发视作指挥一个乐团

00:03:10.685 --> 00:03:14.509
有时候 我会把前端项目开发视作指挥一个乐团

00:03:14.509 --> 00:03:15.620
可能听起来有点搞笑

00:03:15.620 --> 00:03:20.435
任何时候都有很多不同的乐器在演奏

00:03:20.435 --> 00:03:24.094
如果把每个 Web 资源都比作其中一部乐器

00:03:24.094 --> 00:03:27.724
那么 前端开发者就像这个乐团的总指挥

00:03:27.724 --> 00:03:32.719
必须确保每种乐器都在正确的时间演奏

00:03:32.719 --> 00:03:34.789
即使只是其中一部乐器没有跟上

00:03:34.789 --> 00:03:39.229
都将影响到整个作品的演奏效果

00:03:39.229 --> 00:03:44.429
因此 在构建前端应用程序时

00:03:44.430 --> 00:03:47.990
你需要自己编排所有不同类型的资源文件

00:03:47.990 --> 00:03:52.390
来构建我们所希望网页呈现的美丽画卷

00:03:52.389 --> 00:03:59.250
最困难的是 作为开发者的你 却不能出现在应用运行的现场

00:03:59.250 --> 00:04:01.669
用户自己会启动应用

00:04:01.669 --> 00:04:05.839
所以 还不仅是在运行时的编排

00:04:05.840 --> 00:04:10.099
实际上你必须提前安排好所有资源的执行顺序

00:04:10.099 --> 00:04:12.169
记录这些规则以备后用

00:04:12.169 --> 00:04:16.029
这就好像在另一个房间里当乐队指挥一样

00:04:16.029 --> 00:04:21.169
这很难 我认为这是前端开发的难点之一

00:04:21.170 --> 00:04:27.080
因此 要使开发流程保持简单有效 Webpack 或其他构建工具必不可少

00:04:27.079 --> 00:04:34.439
因此 要使开发流程保持简单有效 Webpack 或其他构建工具必不可少

