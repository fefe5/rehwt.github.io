WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.370
在谈到 align-items 和 justify-content 之前

00:00:05.370 --> 00:00:11.655
我想提到的事情是如何自行查阅文档

00:00:11.654 --> 00:00:16.439
想要记住所有的东西明显是不可能的

00:00:16.440 --> 00:00:20.520
当然 你可以花一万个小时 然后你会对很多知识都了然于心

00:00:20.519 --> 00:00:24.000
在你开始写代码时 可能你的手指自动就知道从哪里开始了

00:00:24.000 --> 00:00:28.349
但实际上是 有太多的属性了 即使是专业开发者

00:00:28.349 --> 00:00:32.359
也需要经常查看文档来了解不同的属性

00:00:32.359 --> 00:00:34.759
所以在昨晚 当我自己在

00:00:34.759 --> 00:00:37.269
浏览文档时 我想了下

00:00:37.270 --> 00:00:41.150
我不想装作自己学富五车 啥都知道

00:00:41.149 --> 00:00:44.060
所以 我会向你展示一些编写代码时的流程 我们会一起查阅文档

00:00:44.060 --> 00:00:47.750
然后找到所需的知识

00:00:47.750 --> 00:00:49.670
让我们开始吧

00:00:49.670 --> 00:00:53.100
这里是一个关于 justify-content 的文档页面

00:00:53.100 --> 00:00:58.295
可以看到 justify-content 有不同的属性

00:00:58.295 --> 00:01:01.594
start、center、space-between、

00:01:01.594 --> 00:01:04.414
space-around 和 space-evenly 等等

00:01:04.415 --> 00:01:10.520
我们当前使用的是 justify-content center 属性

00:01:10.519 --> 00:01:13.670
我们再试试其他的选项

00:01:13.670 --> 00:01:17.230
如果我设置 justify-content 为 start 会发生什么？

00:01:17.230 --> 00:01:18.965
看见没？

00:01:18.965 --> 00:01:24.665
所有的 box 都从开始位置排成了一行

00:01:24.665 --> 00:01:28.210
让我们再来一遍 先回到 center 状态

00:01:28.209 --> 00:01:29.884
这次我们试试另一个选项

00:01:29.885 --> 00:01:38.320
如果设置为 space-around 会发生什么呢？

00:01:38.319 --> 00:01:43.294
现在 它们均匀地分散排列 并且四周都有空隙

00:01:43.295 --> 00:01:46.355
再看一次 回到 center 状态

00:01:46.355 --> 00:01:48.109
之前是 space-around

00:01:48.109 --> 00:01:49.745
这次我们再试试更多的选项

00:01:49.745 --> 00:01:53.500
试试 space-evenly 吧 ?

00:01:54.409 --> 00:01:58.965
不错 生效了 如果你仔细注意一下的话

00:01:58.965 --> 00:02:02.975
justify-content 改变了元素在水平轴上的布局情况

00:02:02.974 --> 00:02:06.719
我们尝试一个不同的属性 align-items

00:02:06.719 --> 00:02:13.500
为了展示效果 我们创建更多 box

00:02:13.500 --> 00:02:18.455
好了 现在我们来试试 align-items 属性

00:02:18.455 --> 00:02:23.490
这里我们有了 5 个 box

00:02:23.490 --> 00:02:24.810
box 1

00:02:24.810 --> 00:02:26.939
2 3 4 还有 5

00:02:26.939 --> 00:02:30.469
当前设置的 align-items 属性是 center

00:02:30.469 --> 00:02:32.180
如果我们看看文档的话

00:02:32.180 --> 00:02:37.205
可以看到其他的值有 stretch、start、end 等等

00:02:37.205 --> 00:02:40.625
我们来试试 stretch 看看发生了什么？

00:02:40.625 --> 00:02:44.969
先把这里改为 column 

00:02:47.000 --> 00:02:50.210
然后 align-items 设置为 stretch

00:02:50.210 --> 00:02:52.640
我们可以看到它们拉伸并

00:02:52.639 --> 00:02:56.179
撑满了整行容器宽度

00:02:56.180 --> 00:02:58.760
这是弹性盒子强大的能力之一

00:02:58.759 --> 00:03:04.030
你在这里可以看到 box 没有显式的设置宽度和高度

00:03:04.030 --> 00:03:06.034
只有一个边框

00:03:06.034 --> 00:03:10.759
通过简单地改变容器中元素的适应方式

00:03:10.759 --> 00:03:13.310
我们就可以改变它们的外形

00:03:13.310 --> 00:03:15.634
再试试 end 吧

00:03:15.634 --> 00:03:18.560
好了 现在 align-items 为 end 了

00:03:18.560 --> 00:03:24.629
那么 start 状态呢？还是一样

00:03:24.629 --> 00:03:30.159
如果我们设置为 row 呢？

00:03:30.919 --> 00:03:37.259
我们试试 center 然后是 stretch

00:03:37.259 --> 00:03:39.599
我们把 justify-content 注释掉 看看发生什么

00:03:39.599 --> 00:03:42.710
还是没有变化

00:03:42.710 --> 00:03:45.740
如果我们改变一下轴的方向呢？

00:03:45.740 --> 00:03:48.310
好了 现在有变化了

00:03:48.310 --> 00:03:52.219
所以你可以看到 align-items 和 justify-content 会根据

00:03:52.219 --> 00:03:55.925
flex-direction 而动态变化

00:03:55.925 --> 00:04:03.765
当前方式是我认为看起来最舒服的一种布局方式

00:04:03.764 --> 00:04:05.449
我喜欢让这些 box 依次排列

00:04:05.449 --> 00:04:09.530
并尽可能地均匀分布 占据所有空间

00:04:09.530 --> 00:04:13.145
在这个例子中 我们让 box 1 到 box 5 的所有元素

00:04:13.145 --> 00:04:16.970
在父容器之间依次排序 占据整行 元素之间均匀留有空隙

00:04:16.970 --> 00:04:19.560
这样的话 即使拿掉 box 5

00:04:19.560 --> 00:04:23.240
可以看到

00:04:23.240 --> 00:04:27.514
剩余的 4 个盒子依然是均匀分布状态

00:04:27.514 --> 00:04:30.529
再次拿掉 box 3

00:04:30.529 --> 00:04:31.939
看见了没？

00:04:31.939 --> 00:04:36.399
弹性盒子的灵活性和布局可塑性很强

00:04:36.399 --> 00:04:39.579
box 1 box 4

00:04:40.069 --> 00:04:42.675
仍然均匀分布在中间

00:04:42.675 --> 00:04:43.980
并不需要额外的代码

00:04:43.980 --> 00:04:45.569
box 1 就会居中显示

00:04:45.569 --> 00:04:47.509
我们已经看过很多种情况了

00:04:47.509 --> 00:04:51.810
包括删除和添加不同的元素

00:04:51.810 --> 00:04:57.050
其实 我们也可以通过 Javscript 来完成所有这些功能

00:04:57.050 --> 00:04:59.050
实际上 如果你上网搜索的话

00:04:59.050 --> 00:05:01.343
经常会有很多人争论哪种语言最好

00:05:01.343 --> 00:05:04.360
一方面 JavaScript 是

00:05:04.360 --> 00:05:10.180
一门更复杂的语言 可以让你实现很多 CSS 不能完成的功能

00:05:10.180 --> 00:05:13.860
但是 CSS 是一门更简单的语言

00:05:13.860 --> 00:05:16.009
通过它 你可以更轻松的完成一些类似的功能

00:05:16.009 --> 00:05:18.305
在你掌握了这两种不同的语言之后

00:05:18.305 --> 00:05:21.639
你可以自由权衡什么时候以及如何

00:05:21.639 --> 00:05:26.789
使用 CSS 或 Javascript 来操作你的 DOM 元素

