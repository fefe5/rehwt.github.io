WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.745
服务器端和客户端开发让人迷惑的原因之一是

00:00:04.745 --> 00:00:06.515
不同的组织方式

00:00:06.514 --> 00:00:09.684
一种和过去习惯不同的目录结构

00:00:09.685 --> 00:00:11.640
目录结构是指

00:00:11.640 --> 00:00:14.550
文件的组织方式

00:00:14.550 --> 00:00:16.695
Web 应用最终也是通过这些文件实现的

00:00:16.695 --> 00:00:19.560
网页本身并不是服务器的一部分

00:00:19.559 --> 00:00:22.979
它们通常存放于一个目录底下

00:00:22.980 --> 00:00:26.339
服务器知道如何找到

00:00:26.339 --> 00:00:30.045
index.html 进而访问其他页面

00:00:30.045 --> 00:00:34.079
CSS 和 JavaScript 也放在该目录底下

00:00:34.079 --> 00:00:36.945
浏览器可以直接读取

00:00:36.945 --> 00:00:42.049
使用 Express 开发 Web 应用

00:00:42.049 --> 00:00:45.409
则需要在包含 index.html 等网页文件的目录

00:00:45.409 --> 00:00:49.549
之外 和该目录平级的地方

00:00:49.549 --> 00:00:51.544
创建一个文件

00:00:51.545 --> 00:00:53.685
server.js

00:00:53.685 --> 00:00:57.770
这个文件是让 Node 运行的 其他目录和文件则是让浏览器访问的

00:00:57.770 --> 00:01:00.395
让我们看一个例子

00:01:00.395 --> 00:01:02.160
在这个例子中

00:01:02.159 --> 00:01:06.664
包含网页文件的目录是 website

00:01:06.665 --> 00:01:09.185
因此在 server.js 中

00:01:09.185 --> 00:01:13.939
使用 app.use(express.static('website'));

00:01:13.939 --> 00:01:16.280
这个字符串

00:01:16.280 --> 00:01:19.295
就是网页文件所在的目录名

00:01:19.295 --> 00:01:23.740
回到示例程序

00:01:23.739 --> 00:01:26.104
里面也有类似的一行

00:01:26.105 --> 00:01:31.820
只不过这里传入的字符串是 demo

00:01:31.819 --> 00:01:35.449
因为用到的目录是 demo

00:01:35.450 --> 00:01:39.620
如果目录名是 website 那么就要传入 website

00:01:39.620 --> 00:01:42.155
这种结构需要花点时间适应

00:01:42.155 --> 00:01:44.435
一旦熟练

00:01:44.435 --> 00:01:48.090
你就能理解为什么要这样做了

