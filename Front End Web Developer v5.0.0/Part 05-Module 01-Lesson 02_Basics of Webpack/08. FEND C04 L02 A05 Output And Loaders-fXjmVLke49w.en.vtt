WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.339
We've been able to run webpack,

00:00:02.339 --> 00:00:04.560
to create a dist folder,

00:00:04.559 --> 00:00:09.164
so now let's talk a little bit more about what that dist folder is and what it's doing.

00:00:09.164 --> 00:00:14.369
Dist stands for distribution and it sits next to

00:00:14.369 --> 00:00:17.519
our source folder and the two

00:00:17.519 --> 00:00:21.495
of them play a really important point in front-end development.

00:00:21.495 --> 00:00:25.400
The source folder is all the folders that you create,

00:00:25.399 --> 00:00:29.159
it's all of the asset files that you write,

00:00:29.160 --> 00:00:31.964
and all of those files that you're going to edit.

00:00:31.964 --> 00:00:37.740
The distribution folder, is for giving out to all of the web pages as there run,

00:00:37.740 --> 00:00:44.179
so your website that's running for a client or for a user on the browser,

00:00:44.179 --> 00:00:49.894
is going to reference the distribution file and not the source file.

00:00:49.895 --> 00:00:54.200
That's a really big concept that I want you to walk away with and be really solid

00:00:54.200 --> 00:00:58.339
on because they think it's something that junior devs often struggle with,

00:00:58.338 --> 00:01:03.195
it's this idea that when you go to edit a file for your company, where do you edit it,

00:01:03.195 --> 00:01:08.584
there's going to be two versions of the same file or if you go to edit a style,

00:01:08.584 --> 00:01:11.974
that style is going to show up in multiple style sheets but

00:01:11.974 --> 00:01:16.354
which one do you edit and what's the difference between the two?

00:01:16.355 --> 00:01:23.810
The distribution folder, is going to have every style that you've written inside of it,

00:01:23.810 --> 00:01:25.865
and also the source file is going to have

00:01:25.864 --> 00:01:29.375
every style that you've written is going to be there in the source.

00:01:29.375 --> 00:01:35.689
So when you go to edit a file and you want that change to be seen on the web page,

00:01:35.689 --> 00:01:38.359
you might go to the distribution file and you

00:01:38.359 --> 00:01:41.189
would change the style that you need to edit,

00:01:41.189 --> 00:01:48.004
so let's say that you are editing the background color of a button and that button,

00:01:48.004 --> 00:01:51.390
needs to be blue but it's red,

00:01:51.390 --> 00:01:55.939
well, you might go to the distribution file and you would change the style in

00:01:55.939 --> 00:02:01.265
your main.css or your bundle.css file,

00:02:01.265 --> 00:02:05.439
and you would see the button immediately change from red to blue,

00:02:05.439 --> 00:02:07.549
which is perfect and that's what you wanted and so

00:02:07.549 --> 00:02:10.055
you would think that you had done the task.

00:02:10.055 --> 00:02:14.750
But the problem is that you didn't really change the file, what happens is,

00:02:14.750 --> 00:02:19.129
all of your source files are run through a build tool and

00:02:19.129 --> 00:02:25.894
the distribution file is generated by that built tool from the styles that are in source.

00:02:25.895 --> 00:02:29.570
So you might change the distribution file but it's going to

00:02:29.569 --> 00:02:33.799
get overwritten every time that you rebuild those source files.

00:02:33.800 --> 00:02:37.630
So you might make a change to the source file,

00:02:37.629 --> 00:02:41.780
and you would see nothing happened on the web page yet.

00:02:41.780 --> 00:02:45.060
In fact, once you build those styles,

00:02:45.060 --> 00:02:46.925
run them through your build tool,

00:02:46.925 --> 00:02:51.655
then you will actually generate that new distribution file and your styles will be there.

00:02:51.655 --> 00:02:54.280
So I think it's a thing that took me a

00:02:54.280 --> 00:02:56.979
long time to get but it's a really important thing to get,

00:02:56.979 --> 00:03:00.099
that if you go to change the built file,

00:03:00.099 --> 00:03:02.889
you'll see the change immediately but it won't be permanent and

00:03:02.889 --> 00:03:06.019
if you want to change that style permanently,

00:03:06.020 --> 00:03:09.850
then you need to change the source files and rebuild in order

00:03:09.849 --> 00:03:13.884
to get those files or get those styles into the built folder.

00:03:13.884 --> 00:03:19.199
The distribution file, is exactly what that is for,

00:03:19.199 --> 00:03:24.039
so here we created a new disk folder and inside of it is the

00:03:24.039 --> 00:03:29.454
main.js and the JavaScript that we put into our index.js file,

00:03:29.455 --> 00:03:31.445
shows up here just fine,

00:03:31.444 --> 00:03:35.185
but there are some problems with this, first off,

00:03:35.185 --> 00:03:38.739
this main.js file that we've created,

00:03:38.739 --> 00:03:40.435
isn't being used anywhere,

00:03:40.435 --> 00:03:41.710
it's just sitting there,

00:03:41.710 --> 00:03:45.865
it has no connection whatsoever to our view.

00:03:45.865 --> 00:03:50.935
So if we go to look at our view folder in our index.html file,

00:03:50.935 --> 00:03:54.925
here we see that the assets that we're bringing in,

00:03:54.925 --> 00:03:58.510
are the styles and JavaScript files that we've

00:03:58.509 --> 00:04:03.304
created and they're the direct reference to those files in source,

00:04:03.305 --> 00:04:05.420
but that's not what we need anymore.

00:04:05.419 --> 00:04:10.094
Now, we actually need to reference the dist folder for all of those,

00:04:10.094 --> 00:04:16.819
so I'm going to "Add" a new reference to the dist main.js file,

00:04:16.819 --> 00:04:19.759
and what's going to be really cool about that,

00:04:19.759 --> 00:04:23.404
is that we actually don't even need these anymore,

00:04:23.404 --> 00:04:31.479
we can just get rid of all of these and just stick with the reference to dist.

00:04:31.480 --> 00:04:34.939
Now, to be honest we're actually going to get rid

00:04:34.939 --> 00:04:37.939
of this hard-coded reference to dist in just a little while,

00:04:37.939 --> 00:04:41.295
but just so that you can get a hold of the concept,

00:04:41.295 --> 00:04:44.585
that we no longer need references to all the source files

00:04:44.584 --> 00:04:48.889
because they are all being generated into these distributed files.

00:04:48.889 --> 00:04:54.490
Our HTML file, is now referencing the correct distribution file,

00:04:54.490 --> 00:05:01.519
but we still have a problem with this code that we need to address and that issue is

00:05:01.519 --> 00:05:09.274
that our index.js file is not taking in any of the JavaScript that we've already built.

00:05:09.274 --> 00:05:16.234
In fact, it has no connection whatsoever to all of the files that are in our js folder,

00:05:16.235 --> 00:05:20.884
so if we take a look at our JavaScript's,

00:05:20.884 --> 00:05:26.349
we have two files here that we need to bring into the index.js file.

00:05:26.350 --> 00:05:31.520
Now, if you're just reaching for a tool you might want to just say like,

00:05:31.519 --> 00:05:33.589
"Oh I want to require this file."

00:05:33.589 --> 00:05:36.119
But the problem is that,

00:05:36.120 --> 00:05:37.340
this is client side,

00:05:37.339 --> 00:05:40.758
we're on a browser we don't have require,

00:05:40.759 --> 00:05:43.595
we can't just get things from wherever we want,

00:05:43.595 --> 00:05:46.340
so how do we actually bring these files

00:05:46.339 --> 00:05:50.435
in without just throwing them all in the same file.

00:05:50.435 --> 00:05:52.790
Well, to do this,

00:05:52.790 --> 00:05:57.580
a common thing that developers will choose to do is to add a tool called Babel.

00:05:57.579 --> 00:06:03.589
Babel is a specialized tool that translates one version of JavaScript to

00:06:03.589 --> 00:06:10.114
another and it will allow us to use newer versions of JavaScript and the syntax for them,

00:06:10.115 --> 00:06:13.954
even though the browser doesn't run those natively.

00:06:13.954 --> 00:06:17.514
So for instance, it will allow us to run ES6,

00:06:17.514 --> 00:06:20.159
when the browser doesn't know what ES6 is,

00:06:20.160 --> 00:06:25.130
because Babel is going to translate all of that newer syntax,

00:06:25.129 --> 00:06:27.740
into a syntax that the browser can understand.

00:06:27.740 --> 00:06:30.210
In the end, what that will allow us to do,

00:06:30.209 --> 00:06:34.224
is run import statements, ES6 import statements,

00:06:34.225 --> 00:06:37.160
here inside of our index.js file,

00:06:37.160 --> 00:06:41.590
in order to bring in the other JavaScript files that we've written.

00:06:41.589 --> 00:06:43.679
It might seem a little bit silly,

00:06:43.680 --> 00:06:49.720
that in order to configure webpack we have to also configure and install Babel,

00:06:49.720 --> 00:06:53.530
but that's really just the way that all of these configurations go,

00:06:53.529 --> 00:06:55.419
you install multiple tools at

00:06:55.420 --> 00:06:59.215
the same time in order to get the setup exactly the way you want it.

00:06:59.214 --> 00:07:00.744
So in the next step,

00:07:00.745 --> 00:07:03.004
we're going to install Babel,

00:07:03.004 --> 00:07:08.469
so as we get ready to install Babel all of the commands that you need to run,

00:07:08.470 --> 00:07:10.465
in order to get Babel installed,

00:07:10.464 --> 00:07:13.599
are going to be part of the course materials so that you don't have to memorize them,

00:07:13.600 --> 00:07:16.129
no one expects you to memorize them.

00:07:16.129 --> 00:07:17.944
So to get started here,

00:07:17.944 --> 00:07:20.798
I'm currently just in the root of my project,

00:07:20.798 --> 00:07:24.354
I am on the same level as the package.json file,

00:07:24.355 --> 00:07:27.650
and I'm going to run this command.

00:07:27.649 --> 00:07:29.774
So let's unpack this a little bit,

00:07:29.774 --> 00:07:33.435
I'm doing an npm install and in npm,

00:07:33.435 --> 00:07:36.204
when you add the dash d to a command,

00:07:36.204 --> 00:07:39.214
it means that you're installing this to development.

00:07:39.214 --> 00:07:42.679
This means that all of the packages that we're installing right now,

00:07:42.680 --> 00:07:46.560
are not for the production side of our application,

00:07:46.560 --> 00:07:51.350
they don't need to be present when we are actually serving our app to users,

00:07:51.350 --> 00:07:55.955
instead, these are just going to be available during the development process.

00:07:55.954 --> 00:07:59.284
So we're installing Babel

00:07:59.285 --> 00:08:03.785
and some of the presets that Babel needs in order to work with webpack,

00:08:03.785 --> 00:08:05.240
just in order to be set up.

00:08:05.240 --> 00:08:07.730
So I'm going to run that,

00:08:07.730 --> 00:08:10.310
and while that's running we're going to come back to

00:08:10.310 --> 00:08:14.139
our code and set up some of the other things that we need.

00:08:14.139 --> 00:08:19.805
Babel, much like webpack requires a configuration file,

00:08:19.805 --> 00:08:21.530
so at the same level,

00:08:21.529 --> 00:08:22.549
at the root level,

00:08:22.550 --> 00:08:25.235
right next to our webpack config js,

00:08:25.235 --> 00:08:28.225
I'm going to "Add" a new file,

00:08:28.225 --> 00:08:35.250
and we're going to call that the babelrc file,

00:08:35.250 --> 00:08:41.754
and.babelrc, once we've created the babelrc file,

00:08:41.754 --> 00:08:47.674
we're just going to add a few configurations that will just set the preset for babelrc.

00:08:47.674 --> 00:08:51.424
You don't need to think too much about these, in fact,

00:08:51.424 --> 00:08:54.469
we're not going to go too in depth into Babel at all,

00:08:54.470 --> 00:08:56.075
we're going to stay more on the surface,

00:08:56.075 --> 00:08:59.270
for now just know that these are the configurations that you

00:08:59.269 --> 00:09:03.024
need in order to get Babel up and working for ES6,

00:09:03.024 --> 00:09:07.235
depending on your project and your setup you might need to change other things but

00:09:07.235 --> 00:09:09.830
Babel has pretty good documentation for

00:09:09.830 --> 00:09:12.770
helping you figure out what all of those configurations are.

00:09:12.769 --> 00:09:16.739
So for now, we're just going to use these presets,

00:09:16.739 --> 00:09:19.974
so now, that we have Babel configured and installed,

00:09:19.974 --> 00:09:24.460
we can use it to import all of our JavaScript files,

00:09:24.460 --> 00:09:30.195
and now we have access to that really cool ES6 syntax where we can use an import.

00:09:30.195 --> 00:09:33.045
So as an example of an import,

00:09:33.044 --> 00:09:38.379
I can "Add" a reference to the formHandler function,

00:09:38.379 --> 00:09:41.320
that's some custom JavaScript that I wrote and

00:09:41.320 --> 00:09:45.504
the handleSubmit is just what we're going to call it on this side,

00:09:45.504 --> 00:09:49.509
and that is going to reference this formHandler function here.

00:09:49.509 --> 00:09:53.634
Now, you can see that I've already exported this function preemptively,

00:09:53.634 --> 00:09:59.710
this export is what allows us to import the file here.

00:09:59.710 --> 00:10:03.190
Exports and imports can get a little bit confusing but you just have to

00:10:03.190 --> 00:10:07.225
remember that they're like exporting and importing things to different countries.

00:10:07.225 --> 00:10:12.894
You can't import something unless it has also already been exported from somewhere else.

00:10:12.894 --> 00:10:16.189
So you'll never have any luck importing something if you

00:10:16.190 --> 00:10:20.075
haven't already exported it from the file where you wrote it.

00:10:20.075 --> 00:10:26.605
So now, we can use this ES6 import statements in our index.js file.

00:10:26.605 --> 00:10:29.730
Babel is the thing that allows us to use this ES6,

00:10:29.730 --> 00:10:35.825
it's taking this ES6 syntax and turning it into normal JavaScript for our browser,

00:10:35.825 --> 00:10:39.259
which is really cool, but in order to use Babel,

00:10:39.259 --> 00:10:44.899
there's one last thing that we need to do and it takes us into our next webpack concept.

00:10:44.899 --> 00:10:49.375
If we come back to our webpack config file,

00:10:49.375 --> 00:10:55.225
we're going to add one piece to it and that is a rule, now,

00:10:55.225 --> 00:11:00.830
these are loaders and JavaScript webpack uses

00:11:00.830 --> 00:11:06.860
loaders and plug-ins to achieve the bundling of all of our assets.

00:11:06.860 --> 00:11:09.500
This is an example of a loader,

00:11:09.500 --> 00:11:12.080
and this in particular is the Babel loader.

00:11:12.080 --> 00:11:15.830
We installed it when we installed all of the tools for Babel,

00:11:15.830 --> 00:11:17.940
but now we're actually going to use it,

00:11:17.940 --> 00:11:25.210
and this is the first time that you'll see us using a rule in webpack, and you can see,

00:11:25.210 --> 00:11:31.519
that it just goes under an array of rules and we actually use regex,

00:11:31.519 --> 00:11:36.289
to isolate the type of file that we're going to run this loader on.

00:11:36.289 --> 00:11:41.509
So in this case, we're looking for anything that ends in.js.

00:11:41.509 --> 00:11:45.950
So when webpack generates the dependency tree,

00:11:45.950 --> 00:11:48.620
it is going to have a whole bunch of

00:11:48.620 --> 00:11:52.250
different types of files that are in that dependency tree.

00:11:52.250 --> 00:11:58.460
This is saying that any of those asset files that end in a.js,

00:11:58.460 --> 00:12:03.805
need to be treated or run through this particular loader.

00:12:03.804 --> 00:12:07.429
Now, a really cool thing about this loader is that,

00:12:07.429 --> 00:12:10.099
we don't want to run it on all of our node modules,

00:12:10.100 --> 00:12:13.909
so we can also exclude certain files or certain files

00:12:13.909 --> 00:12:18.144
in certain directories from being used in this loader.

00:12:18.144 --> 00:12:21.139
We'll talk about more loaders in a second,

00:12:21.139 --> 00:12:25.370
but just to get started this is the Babel loader that is going to allow us to

00:12:25.370 --> 00:12:30.835
use webpack on our JavaScript files.

00:12:30.835 --> 00:12:36.200
So if we come over and re-run our build command,

00:12:36.200 --> 00:12:40.850
you'll see that we have the index.js file which is the one that

00:12:40.850 --> 00:12:45.590
we've had and it's where webpack is starting from our dependency tree, but now,

00:12:45.590 --> 00:12:48.620
we also have a new one which is formHandler.js,

00:12:48.620 --> 00:12:51.789
because that's the file that we just imported,

00:12:51.789 --> 00:12:56.059
and when we import a file into index.js,

00:12:56.059 --> 00:13:01.399
it becomes a dependency that webpack will search through and find,

00:13:01.399 --> 00:13:08.384
and if it so happened that handle.submit has another dependency,

00:13:08.384 --> 00:13:11.039
webpack will go through and find that as well.

00:13:11.039 --> 00:13:13.569
So now, that we have this import statement,

00:13:13.570 --> 00:13:17.525
we can go back to the terminal and we can see it run.

00:13:17.524 --> 00:13:20.684
So when we run this,

00:13:20.684 --> 00:13:24.449
we'll see that the old import rules,

00:13:24.450 --> 00:13:26.910
we only had a main.js file here,

00:13:26.909 --> 00:13:28.674
but in our most recent build,

00:13:28.674 --> 00:13:32.004
we have not only the index.js file,

00:13:32.004 --> 00:13:34.754
we're also including the formHandler js file,

00:13:34.754 --> 00:13:36.254
which means that webpack,

00:13:36.254 --> 00:13:41.580
saw that formHandler is now a dependency of the index.js file,

00:13:41.580 --> 00:13:45.384
and it's added both of them to the main.js file,

00:13:45.384 --> 00:13:53.939
so both form handler and index.js are part of our distributed main.js file.

