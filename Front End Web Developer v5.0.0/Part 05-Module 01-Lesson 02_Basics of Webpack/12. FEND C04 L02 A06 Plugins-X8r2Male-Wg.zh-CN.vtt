WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.805
现在来安装 webpack 插件

00:00:02.805 --> 00:00:07.275
插件是我们使用 webpack 完成文件转换以外操作的方式

00:00:07.275 --> 00:00:13.050
插件是我们使用 webpack 完成文件转换以外操作的方式

00:00:13.050 --> 00:00:16.740
使用加载器可以将 JavaScript 文件

00:00:16.739 --> 00:00:20.159
转换为通用的 JavaScript 文件

00:00:20.160 --> 00:00:26.780
我们之前使用了 babel 加载器将编写的 ES6 转换为通用的 JS

00:00:26.780 --> 00:00:32.435
但是当我们要做的不仅仅是将一个文件转换为另一个文件时

00:00:32.435 --> 00:00:34.780
就需要使用插件

00:00:34.780 --> 00:00:39.799
我们要安装的第一个插件叫做 html-webpack-pulgin

00:00:39.799 --> 00:00:43.699
以这个插件开始 因为它在启动当前应用上

00:00:43.700 --> 00:00:45.200
确实有很大的帮助

00:00:45.200 --> 00:00:49.675
此外 这也是一个很常用的插件

00:00:49.674 --> 00:00:56.914
html-webpack-pulgin 的功能就是使 webpack

00:00:56.914 --> 00:01:04.109
动态添加 dist 文件夹的引用 而无需手动操作

00:01:04.109 --> 00:01:07.049
前几节课中

00:01:07.049 --> 00:01:16.979
我们在 html 中添加了引用 JavaScript 文件的硬编码

00:01:16.980 --> 00:01:19.350
引用了 dist 文件夹中的 main.js 文件

00:01:19.349 --> 00:01:20.939
现在不用再这样做了

00:01:20.939 --> 00:01:25.250
只需要依靠 webpack

00:01:25.250 --> 00:01:30.290
就能在 html 文件底部动态添加引用

00:01:30.290 --> 00:01:33.800
要安装插件

00:01:33.799 --> 00:01:39.674
你要做的第一件事 实际上是将其安装到 node_modules 中

00:01:39.674 --> 00:01:42.454
对于 html-webpack-pulgin 来说

00:01:42.454 --> 00:01:47.909
就是运行这个 npm install 命令

00:01:48.519 --> 00:01:55.199
在运行的同时 我们还要返回 webpack 配置文件

00:01:55.200 --> 00:01:58.519
在这里进行一些设置

00:01:58.519 --> 00:02:02.224
告诉 webpack 使用 html-webpack-pulgin

00:02:02.224 --> 00:02:07.159
为此 首先要添加一个

00:02:07.159 --> 00:02:13.049
对 node_modules 目录中 html-webpack-pulgin 插件的引用

00:02:13.050 --> 00:02:16.260
require 该插件

00:02:16.259 --> 00:02:20.884
另外 还需要告诉 webpack 何时运行该插件

00:02:20.884 --> 00:02:25.564
在 module.exports 里面

00:02:25.564 --> 00:02:29.530
添加一个名为 plugins 的部分

00:02:29.530 --> 00:02:31.780
不要忘记逗号

00:02:31.780 --> 00:02:33.844
在 plugins 部分

00:02:33.844 --> 00:02:38.000
声明一个 HtmlWebPackPulgin 的实例

00:02:38.000 --> 00:02:43.444
我们告诉它查看 client/views 目录下的 html 文件

00:02:43.444 --> 00:02:50.614
并在 dist 文件夹中生成一个新的 index.html 文件

00:02:50.615 --> 00:02:55.325
现在我们重新运行命令后

00:02:55.324 --> 00:03:01.834
返回到 dist 文件夹看看有什么变化

00:03:01.835 --> 00:03:05.719
这里 以前只是得到了 main.js 文件

00:03:05.719 --> 00:03:07.430
但是现在有两个文件

00:03:07.430 --> 00:03:09.724
同时还生成了 html 文件

00:03:09.724 --> 00:03:12.034
查看一下这个文件

00:03:12.034 --> 00:03:15.680
现在 滚动到文件的最底部时

00:03:15.680 --> 00:03:18.920
可以看到多了一个 script 标签

00:03:18.919 --> 00:03:22.864
引用了分发文件夹下的 main.js 文件

00:03:22.865 --> 00:03:24.350
更厉害的是

00:03:24.349 --> 00:03:26.000
我不用再手动创建

00:03:26.000 --> 00:03:28.500
甚至我都没有做过这个操作

00:03:28.500 --> 00:03:32.685
这些都是 html-webpack-pulgin 插件完成的

00:03:32.685 --> 00:03:36.710
这意味着我可以转到 index.html 源文件

00:03:36.710 --> 00:03:42.409
删除这个硬编码引用 disk/main.js 的 script 标签

00:03:42.409 --> 00:03:45.560
删除这个硬编码引用 disk/main.js 的 script 标签

00:03:45.560 --> 00:03:50.090
简单来说 如果重新运行命令

00:03:50.090 --> 00:03:55.145
我们会得到一个干净的 html 文件 其顶部没有引用任何内容

00:03:55.145 --> 00:03:58.820
而是在底部使用这个 script 标签

00:03:58.819 --> 00:04:02.794
你可能会问为什么要使用这个插件来

00:04:02.794 --> 00:04:07.814
为我们添加脚本引用而不是自己动手添加

00:04:07.814 --> 00:04:11.009
现在还看不出明显优势

00:04:11.009 --> 00:04:14.090
但是在未来 这会很有帮助

00:04:14.090 --> 00:04:18.290
如果你接触到更进阶的主题 比如缓存清除

00:04:18.290 --> 00:04:23.590
这种使用 webpack 生成 html 文件的策略

00:04:23.589 --> 00:04:29.229
可以使你能创建对特定版本资源文件的动态引用

00:04:29.230 --> 00:04:31.345
这会非常方便

00:04:31.345 --> 00:04:34.030
我们会始终将它安装在项目中

00:04:34.029 --> 00:04:35.654
这样在后续的开发中

00:04:35.654 --> 00:04:38.149
就不用再担心动态引用

00:04:38.149 --> 00:04:41.620
所以 一开始就安装是一件好事

00:04:41.620 --> 00:04:45.500
最后 因为我们现在决定

00:04:45.500 --> 00:04:49.985
使用对 main.js 文件的动态引用

00:04:49.985 --> 00:04:54.574
我们的应用也发生了一些其他的变化 这一点非常值得注意

00:04:54.574 --> 00:04:57.979
你可能没有意识到 因为我们还没有

00:04:57.980 --> 00:05:01.309
过多地关注应用的服务端

00:05:01.309 --> 00:05:05.120
但是这里发生了很大的变化

00:05:05.120 --> 00:05:09.574
应用不再引用我们编写的 index.html 文件

00:05:09.574 --> 00:05:12.974
而要开始依赖于分发文件夹中的 index.html 文件

00:05:12.975 --> 00:05:17.045
而要开始依赖于分发文件夹中的 index.html 文件

00:05:17.045 --> 00:05:20.270
但是现在 服务器还毫不知情

00:05:20.269 --> 00:05:24.680
所以 我们要转到 server 文件夹

00:05:24.680 --> 00:05:29.019
看一下 index.js 文件

00:05:29.019 --> 00:05:36.664
现在可以看到它生成了应用的主页或根页面

00:05:36.665 --> 00:05:41.860
查找的是 client/views 目录下的 index 文件

00:05:41.860 --> 00:05:45.785
这正是 Express 查找用来生成页面的文件

00:05:45.785 --> 00:05:51.725
但是现在我们不再需要引用该文件

00:05:51.725 --> 00:05:56.530
需要引用的是 dist 的 index 文件

00:05:56.529 --> 00:05:59.250
做出这个改动之后

00:05:59.250 --> 00:06:05.399
Express 就知道到哪里查找正确版本的 index.html 文件了

