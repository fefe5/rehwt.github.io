WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.339
我们已经能够运行 webpack

00:00:02.339 --> 00:00:04.560
创建一个 dist 文件夹

00:00:04.559 --> 00:00:09.164
现在深入了解一下 dist 文件夹及其作用

00:00:09.164 --> 00:00:14.369
dist 是 distribution 的缩写 表示分发

00:00:14.369 --> 00:00:17.519
与源文件夹 (src) 并列

00:00:17.519 --> 00:00:21.495
这两个文件夹在前端开发中扮演着非常重要的角色

00:00:21.495 --> 00:00:25.400
源文件夹中包括你创建的所有文件夹

00:00:25.399 --> 00:00:29.159
是你编写的所有资源文件

00:00:29.160 --> 00:00:31.964
以及你需要编辑的所有文件

00:00:31.964 --> 00:00:37.740
分发文件夹 是负责网页运行时的分发

00:00:37.740 --> 00:00:44.179
因此客户或浏览器的用户正在运行的网站

00:00:44.179 --> 00:00:49.894
引用的是分发文件而不是源文件

00:00:49.895 --> 00:00:54.200
这是一个非常重要的概念 希望你能牢牢掌握

00:00:54.200 --> 00:00:58.339
因为这是初级开发者经常困惑的地方

00:00:58.338 --> 00:01:03.195
当你为公司编写代码时究竟要编辑哪个文件 就是基于这个概念

00:01:03.195 --> 00:01:08.584
同一文件有两个版本 或者说如果你要编辑样式

00:01:08.584 --> 00:01:11.974
该样式出现在多个样式表中

00:01:11.974 --> 00:01:16.354
你应该编辑哪一个? 两者有什么区别?

00:01:16.355 --> 00:01:23.810
分发文件夹里有你编写的所有样式

00:01:23.810 --> 00:01:25.865
源文件夹同样也包含你在源文件中编写的所有样式

00:01:25.864 --> 00:01:29.375
源文件夹同样也包含你在源文件中编写的所有样式

00:01:29.375 --> 00:01:35.689
因此 当你要编辑文件并希望在网页上看到变化时

00:01:35.689 --> 00:01:38.359
你可能会选择分发文件

00:01:38.359 --> 00:01:41.189
修改需要编辑的样式

00:01:41.189 --> 00:01:48.004
假设你要编辑按钮的背景色

00:01:48.004 --> 00:01:51.390
按钮需要是蓝色 但现在是红色

00:01:51.390 --> 00:01:55.939
那么 你可能会去分发文件夹

00:01:55.939 --> 00:02:01.265
修改 main.css 或 bundle.css 中的样式

00:02:01.265 --> 00:02:05.439
你会看到按钮立即从红色变为蓝色

00:02:05.439 --> 00:02:07.549
貌似很完美 因为这正是你想要的结果

00:02:07.549 --> 00:02:10.055
你认为自己已经完成了任务

00:02:10.055 --> 00:02:14.750
但问题是你并没有真正改变文件

00:02:14.750 --> 00:02:19.129
实际上 所有源文件都会通过构建工具运行

00:02:19.129 --> 00:02:25.894
分发文件是由构建工具从源文件中的样式生成的

00:02:25.895 --> 00:02:29.570
因此 你虽然可以修改分发文件

00:02:29.569 --> 00:02:33.799
但是每次重新构建这些源文件后 分发文件又会被重写

00:02:33.800 --> 00:02:37.630
因此 你应该修改源文件

00:02:37.629 --> 00:02:41.780
虽然修改后不能立即在网页上看到任何变化

00:02:41.780 --> 00:02:45.060
但实际上 一旦对这些样式进行构建

00:02:45.060 --> 00:02:46.925
通过构建工具运行

00:02:46.925 --> 00:02:51.655
就将生成新的分发文件 修改的样式也在其中

00:02:51.655 --> 00:02:54.280
所以 虽然这个概念

00:02:54.280 --> 00:02:56.979
需要花费很长时间理解 但真的非常重要

00:02:56.979 --> 00:03:00.099
如果你更改构建生成的文件

00:03:00.099 --> 00:03:02.889
会立即看到更改 但这不持久

00:03:02.889 --> 00:03:06.019
而如果你想永久更改样式

00:03:06.020 --> 00:03:09.850
需要更改源文件并重新构建

00:03:09.849 --> 00:03:13.884
将这些文件或样式输出到构建文件夹中

00:03:13.884 --> 00:03:19.199
分发文件正是用于此目的

00:03:19.199 --> 00:03:24.039
所以我们在这里创建了一个新的 dist 文件夹 里面有一个

00:03:24.039 --> 00:03:29.454
main.js 其中包含 index.js 文件中的 JavaScript

00:03:29.455 --> 00:03:31.445
看起来很好

00:03:31.444 --> 00:03:35.185
但还有一些问题 首先

00:03:35.185 --> 00:03:38.739
我们创建的这个 main.js 文件

00:03:38.739 --> 00:03:40.435
没有在任何地方用到

00:03:40.435 --> 00:03:41.710
仅仅是放在那

00:03:41.710 --> 00:03:45.865
没有和我们的视图建立任何连接

00:03:45.865 --> 00:03:50.935
如果去看一下 view 文件夹中的 index.html

00:03:50.935 --> 00:03:54.925
可以看到引入的资源

00:03:54.925 --> 00:03:58.510
是我们创建的样式和 JavaScript 文件

00:03:58.509 --> 00:04:03.304
直接引用了源文件夹中的文件

00:04:03.305 --> 00:04:05.420
但这并不是我们所需要的

00:04:05.419 --> 00:04:10.094
现在 我们实际上需要引用的是 dist 文件夹下的文件

00:04:10.094 --> 00:04:16.819
所以我要添加一个新的引用到 dist 文件夹下的 main.js 文件

00:04:16.819 --> 00:04:19.759
真正有趣的是

00:04:19.759 --> 00:04:23.404
我们实际上不再需要下面这些引用了

00:04:23.404 --> 00:04:31.479
可以删除这些 只保留对 dist 的引用

00:04:31.480 --> 00:04:34.939
说实话 我们稍后实际上也要删除

00:04:34.939 --> 00:04:37.939
对 dist 的硬编码引用

00:04:37.939 --> 00:04:41.295
现在这样做只是为了让你理解这个概念

00:04:41.295 --> 00:04:44.585
我们不再需要引用所有源文件

00:04:44.584 --> 00:04:48.889
因为它们最终都将生成分发文件

00:04:48.889 --> 00:04:54.490
HTML 文件现在引用了正确的分发文件

00:04:54.490 --> 00:05:01.519
但这个代码依然有问题要解决

00:05:01.519 --> 00:05:09.274
index.js 文件没有使用我们已经创建的任何 JavaScript

00:05:09.274 --> 00:05:16.234
实际上 它与 js 文件夹中的所有文件都没有任何联系

00:05:16.235 --> 00:05:20.884
如果看一下我们的 JavaScript

00:05:20.884 --> 00:05:26.349
这里有两个文件需要引入到 index.js 文件中

00:05:26.350 --> 00:05:31.520
现在 如果你想要的只是一个工具 你可能想说

00:05:31.519 --> 00:05:33.589
我想获取 (require) 这个文件

00:05:33.589 --> 00:05:36.119
但问题是

00:05:36.120 --> 00:05:37.340
这是在客户端

00:05:37.339 --> 00:05:40.758
使用的是浏览器 没有 require 模块

00:05:40.759 --> 00:05:43.595
无法随意从想要的地方拿到东西

00:05:43.595 --> 00:05:46.340
那么 在不将所有文件写到同一个文件的前提下

00:05:46.339 --> 00:05:50.435
如何引入这些文件呢?

00:05:50.435 --> 00:05:52.790
要做到这一点

00:05:52.790 --> 00:05:57.580
开发者通常会选择添加一个名为 Babel 的工具

00:05:57.579 --> 00:06:03.589
Babel 是一个专用工具 能将 JavaScript 的一个版本转换为另一个版本

00:06:03.589 --> 00:06:10.114
使我们可以使用更新版本的 Javascript 及其语法

00:06:10.115 --> 00:06:13.954
即使浏览器还没有提供支持

00:06:13.954 --> 00:06:17.514
例如 即使浏览器还不能识别 ES6

00:06:17.514 --> 00:06:20.159
我们也可以借助它来运行 ES6

00:06:20.160 --> 00:06:25.130
因为 Babel 会将所有新语法翻译成

00:06:25.129 --> 00:06:27.740
浏览器可以识别的语法

00:06:27.740 --> 00:06:30.210
最终 这将使我们能够

00:06:30.209 --> 00:06:34.224
在 index.js 文件中运行 ES6 的 import 语句

00:06:34.225 --> 00:06:37.160
在 index.js 文件中运行 ES6 的 import 语句

00:06:37.160 --> 00:06:41.590
来引入我们编写的其他 JavaScript 文件

00:06:41.589 --> 00:06:43.679
这看起来有点傻

00:06:43.680 --> 00:06:49.720
为了配置 webpack 我们还必须配置和安装 Babel

00:06:49.720 --> 00:06:53.530
但这确实就是这些配置的工作方式

00:06:53.529 --> 00:06:55.419
为了到达自己想要的效果

00:06:55.420 --> 00:06:59.215
你需要同时安装多个工具

00:06:59.214 --> 00:07:00.744
所以 下一步

00:07:00.745 --> 00:07:03.004
我们来安装 Babel

00:07:03.004 --> 00:07:08.469
准备安装 Babel 时 需要运行的所有命令

00:07:08.470 --> 00:07:10.465
准备安装 Babel 时 需要运行的所有命令

00:07:10.464 --> 00:07:13.599
可以在教室页面的内容中找到 你不用记住

00:07:13.600 --> 00:07:16.129
没人期望你记住

00:07:16.129 --> 00:07:17.944
所以从这里开始

00:07:17.944 --> 00:07:20.798
我目前位于项目的根目录下

00:07:20.798 --> 00:07:24.354
与 package.json 文件同一层级

00:07:24.355 --> 00:07:27.650
运行这个命令

00:07:27.649 --> 00:07:29.774
再展开说一下这个命令

00:07:29.774 --> 00:07:33.435
我在执行 npm 安装操作 而在 npm 中

00:07:33.435 --> 00:07:36.204
当你在命令中添加 -D 选项

00:07:36.204 --> 00:07:39.214
意味着将其安装到开发环境中

00:07:39.214 --> 00:07:42.679
这意味着现在安装的所有软件包

00:07:42.680 --> 00:07:46.560
不是用于应用的生产环境

00:07:46.560 --> 00:07:51.350
当我们实际向用户提供应用服务时 它们不需要出现

00:07:51.350 --> 00:07:55.955
相反 它们仅在开发过程中可用

00:07:55.954 --> 00:07:59.284
后面的内容表示 我们要安装 Babel

00:07:59.285 --> 00:08:03.785
以及一些 Babel 与 webpack 设置所需的预设

00:08:03.785 --> 00:08:05.240
以及一些 Babel 与 webpack 设置所需的预设

00:08:05.240 --> 00:08:07.730
运行命令

00:08:07.730 --> 00:08:10.310
在运行的同时 我们回到代码中

00:08:10.310 --> 00:08:14.139
做一些需要的其他设置

00:08:14.139 --> 00:08:19.805
和 webpack 很像的是 Babel 也需要一个配置文件

00:08:19.805 --> 00:08:21.530
它们在同一层级

00:08:21.529 --> 00:08:22.549
根目录

00:08:22.550 --> 00:08:25.235
在 webpack.config.js 旁边

00:08:25.235 --> 00:08:28.225
我新建一个新文件

00:08:28.225 --> 00:08:35.250
将其命名为 babelrc

00:08:35.250 --> 00:08:41.754
前面加个点 .babelrc 创建 .babelrc 文件之后

00:08:41.754 --> 00:08:47.674
要添加一些配置 用于设置 babelrc 的预设 (preset)

00:08:47.674 --> 00:08:51.424
实际上 你不需要考虑太多

00:08:51.424 --> 00:08:54.469
我们不会去深究 Babel

00:08:54.470 --> 00:08:56.075
会更多地停留在表层

00:08:56.075 --> 00:08:59.270
现在 你只要知道这些配置是为了

00:08:59.269 --> 00:09:03.024
使 Babel 工作起来 能够使用 ES6

00:09:03.024 --> 00:09:07.235
根据你的项目和设置 你可能还需要更改其他内容

00:09:07.235 --> 00:09:09.830
不过 Babel 提供了优秀的文档

00:09:09.830 --> 00:09:12.770
可以帮助你找到需要的配置

00:09:12.769 --> 00:09:16.739
对于当前项目来说 我们就使用这些预设

00:09:16.739 --> 00:09:19.974
现在已经配置并安装了 Babel

00:09:19.974 --> 00:09:24.460
我们可以用它来导入所有的 JavaScript 文件

00:09:24.460 --> 00:09:30.195
现在 我们可以使用非常酷的 ES6 语法 直接用 import 导入

00:09:30.195 --> 00:09:33.045
作为一个 import 的示例

00:09:33.044 --> 00:09:38.379
我来添加一个对 formHandler 中函数的引用

00:09:38.379 --> 00:09:41.320
这是一段我写的 JavaScript 代码

00:09:41.320 --> 00:09:45.504
handleSubmit 就是我们要调用的函数

00:09:45.504 --> 00:09:49.509
引用自这里的 formHandler 函数

00:09:49.509 --> 00:09:53.634
可以看到我已经事先导出 (export) 了这个函数

00:09:53.634 --> 00:09:59.710
这个导出让我们能够在这里导入

00:09:59.710 --> 00:10:03.190
导出和导入可能会有些困惑 但是你只需要记住

00:10:03.190 --> 00:10:07.225
它们就像不同国家之间商品出口和进口一样

00:10:07.225 --> 00:10:12.894
除非 "商品" 已经从某个地方导出 否则不能执行导入

00:10:12.894 --> 00:10:16.189
所以 你永远无法侥幸导入一个

00:10:16.190 --> 00:10:20.075
还没有从编写的文件里导出过的东西

00:10:20.075 --> 00:10:26.605
现在 我们可以在 index.js 文件中使用这个 ES6 的 import 语句

00:10:26.605 --> 00:10:29.730
Babel 就是让我们能够使用 ES6 的工具

00:10:29.730 --> 00:10:35.825
它将 ES6 语法转换为适用于我们浏览器的普通 JavaScript

00:10:35.825 --> 00:10:39.259
这真的很酷 但是要使用 Babel

00:10:39.259 --> 00:10:44.899
还有最后一件事要做 这将带我们进入 webpack 下一个概念的学习

00:10:44.899 --> 00:10:49.375
回到 webpack 配置文件

00:10:49.375 --> 00:10:55.225
我们要在其中添加一些内容 一条规则 (rules)

00:10:55.225 --> 00:11:00.830
这些就是加载器 (loader) JavaScript webpack 使用

00:11:00.830 --> 00:11:06.860
加载器和插件 (plugin) 来实现所有资源的打包

00:11:06.860 --> 00:11:09.500
这是一个加载器的示例

00:11:09.500 --> 00:11:12.080
准确地说是 Babel 加载器

00:11:12.080 --> 00:11:15.830
我们在安装 Babel 工具时就安装了它

00:11:15.830 --> 00:11:17.940
但是直到现在才开始使用

00:11:17.940 --> 00:11:25.210
这也是你第一次看到我们在 webpack 中使用规则 你可以看到

00:11:25.210 --> 00:11:31.519
它出现在 rules 数组中 我们使用了正则表达式

00:11:31.519 --> 00:11:36.289
来关联要运行该加载器的文件类型

00:11:36.289 --> 00:11:41.509
在这个示例中 我们匹配以 .js 结尾的文件

00:11:41.509 --> 00:11:45.950
当 webpack 生成依赖关系树时

00:11:45.950 --> 00:11:48.620
依赖关系树中会有很多不同类型的文件

00:11:48.620 --> 00:11:52.250
依赖关系树中会有很多不同类型的文件

00:11:52.250 --> 00:11:58.460
这里就是说 任何以 .js 结尾的资源文件

00:11:58.460 --> 00:12:03.805
需要通过这个特定的加载器进行处理

00:12:03.804 --> 00:12:07.429
现在 关于此加载器的一件很酷的设定是

00:12:07.429 --> 00:12:10.099
我们不想让它在 node_modules 中的所有文件上运行

00:12:10.100 --> 00:12:13.909
我们可以排除某些特定文件或

00:12:13.909 --> 00:12:18.144
某些特定目录下的文件使其不被此加载器使用

00:12:18.144 --> 00:12:21.139
稍后我们会讨论更多的加载器

00:12:21.139 --> 00:12:25.370
以 Babel 加载器作为开始是因为它可以

00:12:25.370 --> 00:12:30.835
让我们在 JavaScript 文件上使用 webpack

00:12:30.835 --> 00:12:36.200
如果我们回过头重新运行构建命令

00:12:36.200 --> 00:12:40.850
你会看到有一个 index.js 文件 该文件是

00:12:40.850 --> 00:12:45.590
之前就有的 也是 webpack 构建依赖树开始的地方 但是现在

00:12:45.590 --> 00:12:48.620
还有一个新的 formHandler.js 文件

00:12:48.620 --> 00:12:51.789
这是刚才导入的文件

00:12:51.789 --> 00:12:56.059
当我们将文件导入 index.js 时

00:12:56.059 --> 00:13:01.399
它就成为 webpack 搜索和查找的依赖项

00:13:01.399 --> 00:13:08.384
这种情况下 如果 handleSubmit 还有另一个依赖项

00:13:08.384 --> 00:13:11.039
webpack 会以同样的方式继续查找

00:13:11.039 --> 00:13:13.569
现在 我们加了这个 import 语句

00:13:13.570 --> 00:13:17.525
可以回到终端看它如何运行

00:13:17.524 --> 00:13:20.684
运行命令后

00:13:20.684 --> 00:13:24.449
我们会看到那个旧的规则

00:13:24.450 --> 00:13:26.910
只有一个 main.js 文件 (口误 应该是指 index.js 文件)

00:13:26.909 --> 00:13:28.674
但是在最新的构建中

00:13:28.674 --> 00:13:32.004
不仅有 index.js 文件

00:13:32.004 --> 00:13:34.754
还包含了 formHandler.js 文件

00:13:34.754 --> 00:13:36.254
这意味着 webpack

00:13:36.254 --> 00:13:41.580
看到 formHandler 是 index.js 文件的依赖项

00:13:41.580 --> 00:13:45.384
将它们都添加到 main.js 文件中

00:13:45.384 --> 00:13:53.939
所以 formHandler 和 index.js 都是分发文件 main.js 的一部分

