WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.134
现在开始学习 webpack 入口 (entry)

00:00:03.134 --> 00:00:07.139
入口是 webpack 的第一个主要概念

00:00:07.139 --> 00:00:09.869
它要做的就是提供

00:00:09.869 --> 00:00:14.399
一个用于 webpack 构建依赖关系树的起点

00:00:14.400 --> 00:00:21.039
因此 我们要在 webpack 配置中设置该入口点

00:00:21.039 --> 00:00:26.144
在你从 GitHub 克隆并开始工作的应用中

00:00:26.144 --> 00:00:31.769
现在已经有一个 webpack 配置文件 在这个配置文件中

00:00:31.769 --> 00:00:36.450
我们编写了一些 require 但实际上还是空的

00:00:36.450 --> 00:00:42.710
目前做的不错 但是我们需要真的将其构建出来才能运行

00:00:42.710 --> 00:00:46.594
现在 在 package.json 中

00:00:46.594 --> 00:00:51.439
你应该看到已经安装了 webpack 和 webpack-cli

00:00:51.439 --> 00:00:53.109
现在要做的就是

00:00:53.109 --> 00:00:57.710
实际添加一个 npm 脚本 使我们可以运行 webpack

00:00:57.710 --> 00:01:02.399
我已经在这里添加了

00:01:02.399 --> 00:01:06.094
"build": "webpack" 这是一个 npm 脚本

00:01:06.094 --> 00:01:10.534
自定义 npm 脚本你想写多少都可以

00:01:10.534 --> 00:01:13.969
这个脚本只是用来运行 webpack 命令的

00:01:13.969 --> 00:01:18.234
我们稍后会添加更多实际使用的命令

00:01:18.234 --> 00:01:20.834
不过为了目前这个简单的演示

00:01:20.834 --> 00:01:23.664
现在只运行这句 webpack

00:01:23.665 --> 00:01:26.365
保存这个文件

00:01:26.364 --> 00:01:31.774
然后返回到 webpack 配置文件

00:01:31.775 --> 00:01:35.125
添加一个入口

00:01:35.125 --> 00:01:37.819
在版本 4 的 webpack 中

00:01:37.819 --> 00:01:41.029
有一个默认的入口 但我们需要自定义该入口

00:01:41.030 --> 00:01:45.335
因为我们用了一个 client 文件夹

00:01:45.334 --> 00:01:47.334
与 webpack 默认值不相符

00:01:47.334 --> 00:01:52.039
所以我们声明了 client 文件夹中的 index.js 文件

00:01:52.040 --> 00:01:57.695
是 webpack 构建树的起点

00:01:57.694 --> 00:02:01.125
现在声明了这个入口点

00:02:01.125 --> 00:02:04.640
就可以在终端运行 webpack 了

00:02:04.640 --> 00:02:12.729
因此 我将使用新的 npm 脚本 运行这个 build 命令

00:02:12.729 --> 00:02:14.444
运行之后

00:02:14.444 --> 00:02:17.250
发现遇到了错误 但是在这种情况下

00:02:17.250 --> 00:02:18.794
该错误是有意义的

00:02:18.794 --> 00:02:25.054
出现此错误是因为 webpack 无法解析 users/video… 路径中的 ./src

00:02:25.055 --> 00:02:28.490
这实际上是用一种不太好的方式告诉我们

00:02:28.490 --> 00:02:35.450
client/index.js 文件不存在 我们需要创建

00:02:35.449 --> 00:02:42.769
查看一下这里的 src 文件夹

00:02:42.770 --> 00:02:45.520
我指的是 src 文件夹中的 client 文件夹

00:02:45.520 --> 00:02:52.555
里面要有一个名为 index.js 的文件

00:02:52.555 --> 00:02:54.795
有了这个文件之后

00:02:54.794 --> 00:02:58.819
就能够运行 webpack 并且能看到其构建成功

00:02:58.819 --> 00:03:01.984
现在 运行 npm 的 build 命令

00:03:01.985 --> 00:03:04.860
应该能看到输出和之前不同

00:03:05.509 --> 00:03:08.629
看不到错误了

00:03:08.629 --> 00:03:11.224
取而代之的是这个部分

00:03:11.224 --> 00:03:13.655
这个绿色的部分 绿色是非常好的信号

00:03:13.655 --> 00:03:16.925
我们看到创建了一个 main.js 文件

00:03:16.925 --> 00:03:20.995
目前这个文件大小为 0 字节

00:03:20.995 --> 00:03:23.075
这不是问题 现在还没到那一步

00:03:23.074 --> 00:03:27.289
这意味着 webpack 运行成功

00:03:27.289 --> 00:03:34.549
如果我们回到 index.js 文件 想显示出一些内容

00:03:34.550 --> 00:03:36.920
想看到一些 JavaScript

00:03:36.919 --> 00:03:42.349
那么 我来添加一个 alert 操作

00:03:42.349 --> 00:03:48.299
应该就能看到这行代码体现在新构建的文件中

00:03:48.300 --> 00:03:50.384
重新运行

00:03:50.383 --> 00:03:56.000
现在可以看到 main.js 文件已经创建 大小是 17 字节

00:03:56.000 --> 00:04:01.525
现在 真正有趣的是 如果回头看一下项目结构

00:04:01.525 --> 00:04:04.034
可以看到一个新文件夹

00:04:04.034 --> 00:04:07.784
这个 dist 文件夹开始时并不存在

00:04:07.784 --> 00:04:09.055
我没有创建过

00:04:09.055 --> 00:04:11.719
它是由 webpack 生成的

00:04:11.719 --> 00:04:15.000
打开它看一下

00:04:15.000 --> 00:04:18.529
其中有一个 main.js 文件 这正是 webpack

00:04:18.529 --> 00:04:22.529
创建的 如果打开文件浏览一下

00:04:22.529 --> 00:04:25.549
里面有很多不是我们编写的代码

00:04:25.550 --> 00:04:32.600
这里的一切都是由 webpack 生成的 不存在什么魔法

00:04:32.600 --> 00:04:37.235
但是如果我们查找一下 alert

00:04:37.235 --> 00:04:42.050
可以看到 alert 也在这里

00:04:42.050 --> 00:04:46.610
这是我在 index.js 中编写的代码

00:04:46.610 --> 00:04:52.230
它被创建输出到 webpack 文件包中

