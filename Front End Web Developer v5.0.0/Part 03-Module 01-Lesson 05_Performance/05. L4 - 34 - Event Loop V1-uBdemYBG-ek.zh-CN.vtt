WEBVTT
Kind: captions
Language: zh-CN

00:00:03.350 --> 00:00:06.390
开始编写一些代码

00:00:06.389 --> 00:00:09.083
首先是 console.log

00:00:09.083 --> 00:00:12.839
然后是一个监听点击事件的事件监听器

00:00:12.839 --> 00:00:15.820
并运行 numbers 函数

00:00:15.820 --> 00:00:21.490
每当页面被点击时 它将输出字符串 123

00:00:21.489 --> 00:00:25.039
然后是最后的 console.log 语句

00:00:25.039 --> 00:00:29.719
在这里留出更多空间以便添加事件循环部分

00:00:29.719 --> 00:00:32.414
首先是调用栈

00:00:32.414 --> 00:00:35.945
然后是浏览器和队列

00:00:35.945 --> 00:00:40.210
开始代码执行并逐步讲解整个流程

00:00:40.210 --> 00:00:41.884
从第一行开始

00:00:41.884 --> 00:00:45.484
运行 console.log 并将其添加到调用栈中

00:00:45.484 --> 00:00:49.034
运行完毕后 从调用栈中删除了

00:00:49.034 --> 00:00:50.824
现在到了事件监听器

00:00:50.825 --> 00:00:54.484
被添加到调用栈中 因为代码正在被评估

00:00:54.484 --> 00:00:56.924
然后转到浏览器

00:00:56.924 --> 00:01:00.814
浏览器内部状况对我们来说不可见 但是当浏览器被点击时

00:01:00.814 --> 00:01:04.750
它知道运行 numbers() 函数 就这样

00:01:04.750 --> 00:01:06.799
代码移到最后一行

00:01:06.799 --> 00:01:10.685
运行 console.log 并结束

00:01:10.685 --> 00:01:15.299
就这样 结束了 所有代码都运行了

00:01:15.299 --> 00:01:18.004
每当浏览器被点击时

00:01:18.004 --> 00:01:23.435
numbers() 函数就被移到队列中 等待调用栈被清空

00:01:23.435 --> 00:01:27.394
然后 numbers() 函数被移到调用栈中并被调用

00:01:27.394 --> 00:01:30.244
调用 numbers() 函数将调用另一个 console.log

00:01:30.245 --> 00:01:34.355
结束后 会从列表中被删除

00:01:34.355 --> 00:01:37.000
numbers() 函数结束并被删除

