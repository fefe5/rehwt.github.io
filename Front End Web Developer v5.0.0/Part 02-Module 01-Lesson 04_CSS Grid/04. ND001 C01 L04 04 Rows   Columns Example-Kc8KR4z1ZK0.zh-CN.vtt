WEBVTT
Kind: captions
Language: zh-CN

00:00:01.870 --> 00:00:06.178
关于 CSS grid 中行和列 有很多可以学习的知识

00:00:06.378 --> 00:00:07.799
我们从第一步开始

00:00:08.000 --> 00:00:11.220
这里我们有一个 display 被设置为 grid

00:00:11.419 --> 00:00:15.030
的 container 元素

00:00:15.230 --> 00:00:18.449
在 HTML 代码中 我们在它内部放置了

00:00:18.649 --> 00:00:20.519
3 个有着 class 类名的 div

00:00:20.719 --> 00:00:22.890
你可以看到在 CSS grid 中

00:00:23.089 --> 00:00:25.500
每个 box 元素被分散开来

00:00:25.699 --> 00:00:28.620
并且居中显示 box 1 box 2

00:00:28.820 --> 00:00:31.410
和 box 3 都在同一列上

00:00:31.609 --> 00:00:34.109
显示成了 3 行 在我们做其他事情之前

00:00:34.310 --> 00:00:36.899
我们先来看看 grid-gap 属性

00:00:37.100 --> 00:00:39.269
grid-gap 属性用于控制 grid 中

00:00:39.469 --> 00:00:41.609
元素之间的间距 多一点或者少一点

00:00:41.810 --> 00:00:44.579
所以现在我们的每个元素之间

00:00:44.780 --> 00:00:47.579
拥有 50 像素 如果我们将它设置为

00:00:47.780 --> 00:00:50.489
150 像素的话

00:00:50.689 --> 00:00:51.899
你可以看到它们会分散得会更广

00:00:52.100 --> 00:00:56.579
如果我们设置为 15 像素的话

00:00:56.780 --> 00:00:58.858
它们则会靠得很近

00:00:59.058 --> 00:01:01.229
这些空隙也可以叫做轨道间隙

00:01:01.429 --> 00:01:04.049
网格轨道就是行与行 列与列

00:01:04.250 --> 00:01:07.219
之间的空间

00:01:07.420 --> 00:01:10.438
这里我们现在只有一列

00:01:10.638 --> 00:01:12.149
如果我们想要它变成

00:01:12.349 --> 00:01:15.929
三列布局呢 ?

00:01:16.129 --> 00:01:19.219
我们可以在我们的 container 容器中

00:01:19.420 --> 00:01:22.859
使用 grid-template-columns 属性来指定

00:01:23.060 --> 00:01:25.649
要指定 3 列布局

00:01:25.849 --> 00:01:27.838
你只需要简单的输入

00:01:28.039 --> 00:01:32.219
3 个值就可以了 这里我们设置第一列

00:01:32.420 --> 00:01:34.198
和第二列为 300 像素宽 然后

00:01:34.399 --> 00:01:38.069
第三列稍微设置短一些

00:01:38.269 --> 00:01:42.838
设置为 200 像素宽

00:01:43.039 --> 00:01:45.058
好了 现在我们看见了 3 个元素

00:01:45.259 --> 00:01:47.429
占据了 3 列 不过他们有一点

00:01:47.629 --> 00:01:49.558
超出了容器范围

00:01:49.759 --> 00:01:52.228
因为我们的容器宽度小于 3 列占据

00:01:52.429 --> 00:01:56.218
的总宽度 为了解决这个问题

00:01:56.418 --> 00:01:57.899
我们可以简单的增加容器的宽度

00:01:58.099 --> 00:02:00.569
这里我们设置为百分之百

00:02:00.769 --> 00:02:03.988
的容器宽度 这样我们的容器就

00:02:04.188 --> 00:02:06.359
足够宽了 也能装下 3 个元素

00:02:06.560 --> 00:02:08.969
另外一个我们可以做的是

00:02:09.169 --> 00:02:11.250
使用 grid-template-rows 属性

00:02:11.449 --> 00:02:14.760
这里我们可以看到

00:02:14.960 --> 00:02:15.149
总共出现了

00:02:15.348 --> 00:02:18.750
3 行 同时变成了 1 列

00:02:18.949 --> 00:02:22.439
而且都居中显示

00:02:22.639 --> 00:02:26.670
每行的高度就是我们设置的高度

00:02:26.870 --> 00:02:31.349
所以第一行是 300 像素

00:02:31.549 --> 00:02:35.099
第二行是 250 像素 然后

00:02:35.299 --> 00:02:38.640
第三行则达到了 600 像素

00:02:38.840 --> 00:02:41.819
如果我们想第一行占据更多的空间

00:02:42.019 --> 00:02:44.580
而最后一行占据更少的空间的话也很简单

00:02:44.780 --> 00:02:47.129
我们可以简单的改变它们的值

00:02:47.329 --> 00:02:49.920
我们将第一个值

00:02:50.120 --> 00:02:53.249
改为 600 像素

00:02:53.449 --> 00:02:56.580
这样第一行就会占据 600 像素的空间

00:02:56.780 --> 00:03:01.170
第二行是 250 像素

00:03:01.370 --> 00:03:03.929
然后我们的第三行会很小 60 像素

00:03:04.128 --> 00:03:07.230
你可能会想为什么要设置一个 60 像素的行

00:03:07.430 --> 00:03:09.689
事实上你可以想象一下

00:03:09.889 --> 00:03:12.868
web 页面的底部 比如

00:03:13.068 --> 00:03:14.819
几乎每个网站最底部都至少

00:03:15.019 --> 00:03:17.189
有一栏容器

00:03:17.389 --> 00:03:19.709
这是一种很好的方式

00:03:19.908 --> 00:03:21.629
通过像这样设置你的行

00:03:21.829 --> 00:03:23.909
你可以在内容轨道之间放置

00:03:24.109 --> 00:03:26.189
你的内容

00:03:26.389 --> 00:03:27.868
这些都只是 grid-template-rows

00:03:28.068 --> 00:03:29.789
和 grid-template-columns

00:03:29.989 --> 00:03:32.099
可以做的一小部分事情 接下来

00:03:32.299 --> 00:03:34.379
我们会学习如何将它们结合起来使用

00:03:34.579 --> 00:03:36.840
来创建网格区域

00:03:37.039 --> 00:03:39.450
一个通过行和列创建出的布局系统

00:03:39.650 --> 00:03:41.849
你可以放置任何你想要的元素

00:03:42.049 --> 00:03:47.049
你可以放置任何你想要的元素

