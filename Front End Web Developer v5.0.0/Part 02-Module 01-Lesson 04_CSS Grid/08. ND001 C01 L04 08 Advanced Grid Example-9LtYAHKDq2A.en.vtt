WEBVTT
Kind: captions
Language: en

00:00:01.199 --> 00:00:07.504
So here I have set up a grid that now is using six boxes,

00:00:07.504 --> 00:00:09.984
which we can see spread out across here.

00:00:09.984 --> 00:00:13.029
But as we see they are spread out in this funny way where it looks like

00:00:13.029 --> 00:00:16.050
the first box and the second box have plenty of room.

00:00:16.050 --> 00:00:19.429
Then we start squishing these boxes in here.

00:00:19.429 --> 00:00:21.394
To understand this behavior,

00:00:21.394 --> 00:00:22.914
we can look at the code.

00:00:22.914 --> 00:00:29.230
Here in grid-template-rows, I've set the first row to be 350 pixels.

00:00:29.230 --> 00:00:32.035
The second row to be 350 pixels.

00:00:32.034 --> 00:00:36.834
Then the third row, I'm using 1fr.

00:00:36.835 --> 00:00:41.410
It denotes taking up the rest of the available space.

00:00:41.409 --> 00:00:44.375
So the available space is figured out by taking

00:00:44.375 --> 00:00:48.515
the height of your container which I've set to a 100 view port height,

00:00:48.515 --> 00:00:52.219
subtracting from it the space you've already used which would

00:00:52.219 --> 00:00:56.109
be anything in a row and the grid gap.

00:00:56.109 --> 00:00:59.975
Then 1fr is leaving room for anything else.

00:00:59.975 --> 00:01:04.460
So after we've taken up all of our 350 pixels, our 350 pixels,

00:01:04.459 --> 00:01:06.739
and our grid gap twice at 15px,

00:01:06.739 --> 00:01:10.390
it smushes the rest of it into our last row,

00:01:10.390 --> 00:01:13.329
which is why we can see here it starts to smush at the bottom.

00:01:13.329 --> 00:01:16.399
But 1fr can not be used more than once.

00:01:16.400 --> 00:01:20.240
I could split it up and I could say I want it to be 350 pixels,

00:01:20.239 --> 00:01:25.774
350 pixels, and then twice to go through and split up the space evenly.

00:01:25.775 --> 00:01:27.800
Now it would look like this.

00:01:27.799 --> 00:01:31.459
But get this, we don't need to use pixels at all.

00:01:31.459 --> 00:01:34.489
Here I'm setting up columns,

00:01:34.489 --> 00:01:42.769
seven columns that each use 1fr: 1,2,3,4,5,6,7.

00:01:42.769 --> 00:01:46.409
I'm going to take away the seventh because now we only have six elements.

00:01:46.409 --> 00:01:52.789
But this is saying to divide up evenly 1fr for each of them, the columns.

00:01:52.790 --> 00:01:58.715
So here we can see now we have six equal columns coming across our boxes.

00:01:58.715 --> 00:02:02.525
Let's make the background a little darker to make it easier to see.

00:02:02.525 --> 00:02:06.445
My favorite hex value in the world, 444.

00:02:06.444 --> 00:02:08.639
We'll make the color,

00:02:08.639 --> 00:02:14.549
this is from Edward Tufte's suggestion of fffff8;

00:02:14.550 --> 00:02:17.620
which is slightly off white.

00:02:18.050 --> 00:02:22.564
Let's make it a little easier to see with a bigger font size.

00:02:22.564 --> 00:02:26.300
Now we can see our columns spread evenly.

00:02:26.300 --> 00:02:28.145
But, let's be honest,

00:02:28.145 --> 00:02:33.950
going through and writing 1fr six times is a lot of work.

00:02:33.949 --> 00:02:38.389
Programming is supposed to automate a lot of our work for us.

00:02:38.389 --> 00:02:42.524
This is where the repeat function comes in.

00:02:42.525 --> 00:02:46.335
These two lines of code do the exact same thing.

00:02:46.335 --> 00:02:52.145
I'll prove it to you. Let's comment out this and we'll leave our repeat function.

00:02:52.145 --> 00:02:55.310
It's seven when we want it to be six remember.

00:02:55.310 --> 00:03:00.879
Now we have six boxes spread out evenly by using repeat.

00:03:00.879 --> 00:03:04.594
Repeat, it takes the number of times we want it to repeat

00:03:04.594 --> 00:03:08.449
which is six for us because we have six elements and then the size.

00:03:08.449 --> 00:03:14.344
So I'm saying repeat 1fr which means the rest of the available space six times.

00:03:14.344 --> 00:03:18.240
I could also use repeat with pixels,

00:03:18.240 --> 00:03:20.040
25 pixels is pretty small.

00:03:20.039 --> 00:03:23.719
But you can see I've repeated six times the column.

00:03:23.719 --> 00:03:27.145
Let's do something that looks a tiny bit less bizarre.

00:03:27.145 --> 00:03:29.230
So by using repeat,

00:03:29.229 --> 00:03:33.424
we can automate the creation of our grid-template-columns.

00:03:33.425 --> 00:03:36.830
Now, let's talk about rows.

00:03:36.830 --> 00:03:39.740
If you think about it when you're doing web development,

00:03:39.740 --> 00:03:42.185
there's oftentimes where you're going to want

00:03:42.185 --> 00:03:46.384
an infinite number of rows or as many rows as there is content.

00:03:46.384 --> 00:03:49.099
Think about the way a Facebook feed works.

00:03:49.099 --> 00:03:51.560
You just continue to go down and down and down.

00:03:51.560 --> 00:03:54.830
So it's not like you're setting the number of rows initially,

00:03:54.830 --> 00:03:58.475
the number of rows need to develop from the amount of content you have.

00:03:58.474 --> 00:04:06.924
Luckily for us, CSS grid makes this fairly easy with the grid-auto-rows syntax.

00:04:06.925 --> 00:04:11.410
Grid-auto-rows replaces grid-template-rows. In this instance,

00:04:11.409 --> 00:04:14.539
we're going to use grid-auto-rows with minmax.

00:04:14.539 --> 00:04:18.514
Now minmax works similarly to repeat.

00:04:18.514 --> 00:04:21.675
Repeat took two values,

00:04:21.675 --> 00:04:23.495
minmax takes two values.

00:04:23.495 --> 00:04:26.704
The first is a minimum value that each row must be.

00:04:26.704 --> 00:04:33.634
So this is saying that each row has to be at least 100 pixels and at most is auto.

00:04:33.634 --> 00:04:38.779
So what auto will do is auto will let it be as big as its content holds.

00:04:38.779 --> 00:04:40.609
So if we have giant letters,

00:04:40.610 --> 00:04:43.370
then it'll be a much taller row.

00:04:43.370 --> 00:04:46.819
But they have to be at least 100 pixels.

00:04:46.819 --> 00:04:49.384
Let's take a look at what this looks like in our code.

00:04:49.384 --> 00:04:56.620
So here we can see now that we have very very evenly made rows just by using minmax.

00:04:56.620 --> 00:05:00.550
So now let's try to put together the grid-auto-rows using

00:05:00.550 --> 00:05:04.585
minmax and grid-template-columns using 1fr.

00:05:04.584 --> 00:05:07.930
We've set up our columns to have two columns each of

00:05:07.930 --> 00:05:11.170
them taking up half of the available space left,

00:05:11.170 --> 00:05:15.655
and we've set up our rows to be as many rows as we need to fit

00:05:15.654 --> 00:05:21.129
each element in the two columns between 50 pixels and 135 pixels.

00:05:21.129 --> 00:05:25.094
So what would happen if we added another column?

00:05:25.095 --> 00:05:27.985
We can see that it adjusts perfectly.

00:05:27.985 --> 00:05:32.245
So now we have three columns and two rows.

00:05:32.245 --> 00:05:38.060
We could continue doing this or we could try using repeat,

00:05:38.060 --> 00:05:42.685
let's say 4, 1fr.

00:05:42.685 --> 00:05:48.155
Now we can see that it has gone into four columns and the boxes adjust accordingly.

00:05:48.154 --> 00:05:52.879
This is an example of how you can use minmax with grid-auto-rows and

00:05:52.879 --> 00:05:57.954
repeat with columns to create fancy auto magic grids.

00:05:57.954 --> 00:06:01.709
Good luck doing this on your own. I believe in you.

