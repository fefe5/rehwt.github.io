WEBVTT
Kind: captions
Language: zh-CN

00:00:01.199 --> 00:00:07.504
这里我们有一个由 6 个 box 组成的 grid

00:00:07.504 --> 00:00:09.984
也就是这里展开的这些元素

00:00:09.984 --> 00:00:13.029
不过我们可以看到现在的样式看着比较奇怪

00:00:13.029 --> 00:00:16.050
第一个 box 和第二个 box 占据了很大的空间

00:00:16.050 --> 00:00:19.429
剩余的 box 则开始压缩了

00:00:19.429 --> 00:00:21.394
为了弄清楚这个行为

00:00:21.394 --> 00:00:22.914
我们需要看看我们的代码

00:00:22.914 --> 00:00:29.230
在 grid-template-rows 中 我设置了第一行为 350 像素

00:00:29.230 --> 00:00:32.035
第二行也是 350 像素

00:00:32.034 --> 00:00:36.834
然后第三行这里 我设置了 1fr

00:00:36.835 --> 00:00:41.410
它会占据剩余可用的空间

00:00:41.409 --> 00:00:44.375
剩余的可用的空间是容器的高度

00:00:44.375 --> 00:00:48.515
这里也就是 100vh 的高度

00:00:48.515 --> 00:00:52.219
减去前两个行已经占据的空间

00:00:52.219 --> 00:00:56.109
以及它们之间的间隙距离

00:00:56.109 --> 00:00:59.975
剩余的空间就属于 1fr 了

00:00:59.975 --> 00:01:04.460
我们减去这里的 350 像素 这里的 350 像素

00:01:04.459 --> 00:01:06.739
两个 15 像素的间隙

00:01:06.739 --> 00:01:10.390
剩余的就全部分配给它

00:01:10.390 --> 00:01:13.329
也就是为什么我们会看见底部会被压缩了

00:01:13.329 --> 00:01:16.399
我们也可以多次使用 1fr 单位

00:01:16.400 --> 00:01:20.240
比如 这里我们分配一个 350 像素

00:01:20.239 --> 00:01:25.774
另一个 350 像素 然后将剩余空间平均分配成 2 份

00:01:25.775 --> 00:01:27.800
它就变成这样了

00:01:27.799 --> 00:01:31.459
我们也可以根本就不使用像素单位

00:01:31.459 --> 00:01:34.489
这里我设置了一些列

00:01:34.489 --> 00:01:42.769
7 个列 都设置为 1fr

00:01:42.769 --> 00:01:46.409
因为这里我们只有 6 个元素 所以我们删掉一个

00:01:46.409 --> 00:01:52.789
这里的意思是每个元素按照 1：1 的比例均匀分配所有空间

00:01:52.790 --> 00:01:58.715
所以这里我们可以看到有 6 个等分的列

00:01:58.715 --> 00:02:02.525
我们把背景颜色调暗一些 这样可以看得更清晰一些

00:02:02.525 --> 00:02:06.445
我最喜欢的颜色值是 444

00:02:06.444 --> 00:02:08.639
再设置一下文字颜色

00:02:08.639 --> 00:02:14.549
来自 Edward Tufte 的建议 #fffff8

00:02:14.550 --> 00:02:17.620
稍微淡一点点的白色

00:02:18.050 --> 00:02:22.564
同时也把字体大小设置得更大一些

00:02:22.564 --> 00:02:26.300
好了 现在可以很清楚的看见等分的列了

00:02:26.300 --> 00:02:28.145
但是 老实说

00:02:28.145 --> 00:02:33.950
重复写 6 次 1fr 比较麻烦

00:02:33.949 --> 00:02:38.389
编程就是要让代码自动帮我们做一些事情

00:02:38.389 --> 00:02:42.524
这就是为什么会有一个 repeat 函数

00:02:42.525 --> 00:02:46.335
这两行的代码拥有一样的效果

00:02:46.335 --> 00:02:52.145
真的 我们把这行代码注释掉 然后换成 repeat 函数的方式

00:02:52.145 --> 00:02:55.310
然后我们设置为重复 6 次

00:02:55.310 --> 00:03:00.879
现在六个盒子就是平均分配的状态了

00:03:00.879 --> 00:03:04.594
repeat 函数接受一个数字 也就是我们要重复的次数

00:03:04.594 --> 00:03:08.449
这里就是 6 然后另外一个参数是尺寸

00:03:08.449 --> 00:03:14.344
所以设置为 1fr 意思就是将剩余的空间平均分配成 6 份

00:03:14.344 --> 00:03:18.240
我们也可以使用像素单位

00:03:18.240 --> 00:03:20.040
25 像素有点小

00:03:20.039 --> 00:03:23.719
但是你可以看见它重复生成了 6 列

00:03:23.719 --> 00:03:27.145
让我们来做一些不那么奇怪的事情

00:03:27.145 --> 00:03:29.230
通过使用 repeat 函数

00:03:29.229 --> 00:03:33.424
我们可以自动生成 grid-template-columns 值

00:03:33.425 --> 00:03:36.830
现在我们再来看看行属性

00:03:36.830 --> 00:03:39.740
如果你做 web 开发的话

00:03:39.740 --> 00:03:42.185
有时候你可能会想要

00:03:42.185 --> 00:03:46.384
实现一个无限行的列表 根据具体的内容来生成

00:03:46.384 --> 00:03:49.099
类似 facebook 中的 feed 一样

00:03:49.099 --> 00:03:51.560
你可以不断的往下滑动

00:03:51.560 --> 00:03:54.830
所以你不可能在一开始就设置好固定的行数

00:03:54.830 --> 00:03:58.475
总的行数应该根据内容的具体情况来生成

00:03:58.474 --> 00:04:06.924
幸运的是 CSS grid 允许你通过 grid-auto-rows 语法来轻易的实现它

00:04:06.925 --> 00:04:11.410
在这里可以使用 grid-auto-rows 来替换掉 grid-template-rows

00:04:11.409 --> 00:04:14.539
然后使用 minmax 设置参数

00:04:14.539 --> 00:04:18.514
minmax 和 repeat 函数类似

00:04:18.514 --> 00:04:21.675
repeat 函数接受 2 个值

00:04:21.675 --> 00:04:23.495
minmax 也接受 2 个值

00:04:23.495 --> 00:04:26.704
第一个值是每行所占的最小空间

00:04:26.704 --> 00:04:33.634
所以这里意思是每行至少占用 100 像素的空间 最大设置为 auto

00:04:33.634 --> 00:04:38.779
auto 的意思是它可以尽可能的占据所需的空间

00:04:38.779 --> 00:04:40.609
所以如果我们有一个很大的文字

00:04:40.610 --> 00:04:43.370
它可以显示得非常高

00:04:43.370 --> 00:04:46.819
但是最低得有 100 像素

00:04:46.819 --> 00:04:49.384
我们在代码中来看看

00:04:49.384 --> 00:04:56.620
这里我们可以看到所有的行都非常均匀的分布在容器中

00:04:56.620 --> 00:05:00.550
让我们来使用 minmax 设置 grid-auto-rows 属性

00:05:00.550 --> 00:05:04.585
同时设置 grid-template-columns 为 1fr

00:05:04.584 --> 00:05:07.930
我们设置了两列布局

00:05:07.930 --> 00:05:11.170
每列各占据一半的剩余空间

00:05:11.170 --> 00:05:15.655
行数可以根据我们内容任意增加

00:05:15.654 --> 00:05:21.129
只不过都需要在 50 像素到 135 像素之间

00:05:21.129 --> 00:05:25.094
如果我们多添加一列会发生什么 ？

00:05:25.095 --> 00:05:27.985
可以看到它们会自动调整

00:05:27.985 --> 00:05:32.245
现在我们有了 3 列 和 两行

00:05:32.245 --> 00:05:38.060
我们可以继续手动添加 或是使用 repeat 函数

00:05:38.060 --> 00:05:42.685
比如 (4, 1fr)

00:05:42.685 --> 00:05:48.155
现在它变成了 4 列 所有的元素依然会自动调整位置

00:05:48.154 --> 00:05:52.879
这就是关于 grid-auto-rows minmax 以及

00:05:52.879 --> 00:05:57.954
repeat函数结合起来使用的一个例子了

00:05:57.954 --> 00:06:01.709
亲自动手尝试一下吧 祝你好运

