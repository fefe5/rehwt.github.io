WEBVTT
Kind: captions
Language: zh-CN

00:00:01.310 --> 00:00:06.794
这里我们有一个设置为 grid 的 container 容器

00:00:06.794 --> 00:00:09.480
我们设置宽度为 100%

00:00:09.480 --> 00:00:13.679
和之前一样 我们设置 grid-template-rows 和 grid-template-columnds 属性

00:00:13.679 --> 00:00:15.254
以及 grid-gap

00:00:15.255 --> 00:00:19.274
然后就是 grid-template-areas 这个新属性了

00:00:19.274 --> 00:00:21.434
这里

00:00:21.434 --> 00:00:23.489
我们设置了 top top

00:00:23.489 --> 00:00:25.364
bottom left  和 bottom right 几个区域

00:00:25.364 --> 00:00:31.654
这里 我给每个元素都设置了一个 id 属性

00:00:31.655 --> 00:00:38.344
通过这些 id 我们可以将元素放置在网格中的对应区域

00:00:38.344 --> 00:00:47.394
比如 如果我们想放置 box 1 在 top 区域内

00:00:47.395 --> 00:00:50.540
我可以设置 grid-area 属性为 top

00:00:50.539 --> 00:00:54.049
在这里它会占据顶部一行中的两列

00:00:54.049 --> 00:00:59.719
然后我们将 box 2 放置在 bottomLeft 区域

00:00:59.719 --> 00:01:06.379
将 box 3 放置在 bottomRight 区域

00:01:06.379 --> 00:01:08.614
现在你可以看到 在 top 区域

00:01:08.614 --> 00:01:10.354
我们放置了 box 1 元素

00:01:10.355 --> 00:01:13.415
它占据了第一行中的两列空间

00:01:13.415 --> 00:01:15.830
也就是 grid-template-areas 中的 top top 区域

00:01:15.829 --> 00:01:20.584
box 2 被放置在了 bottomLeft 区域 也就是左下角的位置

00:01:20.584 --> 00:01:23.644
然后 box 3 被放置在 bottomRight 区域

00:01:23.644 --> 00:01:25.924
想要交换它们的位置也非常方便

00:01:25.924 --> 00:01:31.750
我们可以把 box 1 放在 bottomLeft 区域

00:01:31.750 --> 00:01:34.754
把 box 2 放置在 top 区域

00:01:34.754 --> 00:01:37.409
好了 现在 box 2 显示在了上方

00:01:37.409 --> 00:01:39.314
而 box 1 则显示在了左下角

00:01:39.314 --> 00:01:41.765
box 3 还是在右下角区域

00:01:41.765 --> 00:01:47.885
这就是使用 CSS grid 创建网页布局的一个例子

00:01:47.885 --> 00:01:50.600
但是这只是一个基础的例子

00:01:50.599 --> 00:01:55.250
让我们来看一个更实用的例子

00:01:55.250 --> 00:02:01.340
这里你可以看到一个基础的博客网站页面 用线框区分出了不同区域

00:02:01.340 --> 00:02:03.185
有一个 header 区域 sidebar 区域

00:02:03.185 --> 00:02:05.135
content 以及 footer 区域

00:02:05.135 --> 00:02:09.110
这里 我已经设置好了 grid-template-columns

00:02:09.110 --> 00:02:11.230
和 grid-template-rows 属性

00:02:11.229 --> 00:02:13.254
然后在 grid-template-areas 这里

00:02:13.254 --> 00:02:16.625
我设置了一个 hd 区域

00:02:16.625 --> 00:02:19.250
它占据了 1 2 3 4 5 6

00:02:19.250 --> 00:02:22.064
7 8 个列的空间

00:02:22.064 --> 00:02:26.525
这里你应该注意到了 我们在一行也设置了 8 列

00:02:26.525 --> 00:02:34.360
1 2 3 4 5 6 7 8

00:02:34.360 --> 00:02:39.350
因为你的 grid-template-areas 中的命名空间

00:02:39.349 --> 00:02:41.164
设置必须具有一致性

00:02:41.164 --> 00:02:44.000
所以如果你第一行设置了 3 列

00:02:44.000 --> 00:02:47.724
那么你第二行也必须和它匹配才行

00:02:47.724 --> 00:02:51.949
这里我们设置了 grid-area 属性

00:02:51.949 --> 00:02:56.644
它们和我们在上面设置的区域相对应

00:02:56.645 --> 00:02:59.689
所以我们的 header 元素会占据整行的空间

00:02:59.689 --> 00:03:03.395
sidebar 在这里 然后是我们的 main 元素

00:03:03.395 --> 00:03:06.185
但是你可以看到这里

00:03:06.185 --> 00:03:10.520
sidebar 实际上占据了过多的空间

00:03:10.520 --> 00:03:13.705
这是由于我们设置的 column 所占据的空间大小导致的

00:03:13.705 --> 00:03:16.969
所以我们回到上面设置列空间的地方

00:03:16.969 --> 00:03:20.210
我们设置第一列为 30 像素

00:03:20.210 --> 00:03:23.629
sidebar 会占据它的空间

00:03:23.629 --> 00:03:27.049
然后第二列设置为 300 像素宽

00:03:27.050 --> 00:03:32.450
在这里我们可以看见只有 sidebar 和 content 被区分成了 2 部分区域

00:03:32.449 --> 00:03:36.889
因为我们的 header 占据了顶部的整行空间

00:03:36.889 --> 00:03:40.549
footer 也占据了最下面的整行空间

00:03:40.550 --> 00:03:44.960
另外我们也可以改变我们的网格布局

00:03:44.960 --> 00:03:49.980
来让我们的 main 内容区域占据更多的空间

00:03:49.979 --> 00:03:51.334
好了

00:03:51.335 --> 00:03:54.094
现在 sidebar 占据了更少的空间

00:03:54.094 --> 00:04:00.185
或许我们只想让它占据一列的空间

00:04:00.185 --> 00:04:02.539
或者干脆就让它占据两列空间

00:04:02.539 --> 00:04:05.959
显而易见 你可以使用 CSS grid 中的 grid-template-areas

00:04:05.960 --> 00:04:09.860
来灵活创建你想要的页面布局

00:04:09.860 --> 00:04:11.840
在下一节课程中

00:04:11.840 --> 00:04:14.360
我们会看看如何填充一些内容区域

00:04:14.360 --> 00:04:17.479
来创建你的第一个博客网站

00:04:17.478 --> 00:04:21.680
并和一些单独的帖子页面关联起来

00:04:21.680 --> 00:04:25.040
通过 CSS grid 你可以很轻松的

00:04:25.040 --> 00:04:28.580
搭建出每个页面的布局

00:04:28.579 --> 00:04:31.769
让我们一起来看一看吧

